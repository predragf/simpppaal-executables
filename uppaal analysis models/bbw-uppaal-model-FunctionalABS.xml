<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
double VehicleSpeed=-1.0, ABSBrakeTorque=-1.0, SlipRate=-1.0;

clock gtime;

broadcast chan trigg[205];

const double IAT=0.00001;

double driver_accelerate_12_signal;
double pedal_map_13_signal; 
double to_int_14_signal; 
double half_16_signal; 
double negative_17_signal; 
double rr_18_signal; 
double add_19_signal; 
double sample_time_over_mass_20_signal; 
double sum_21_signal=0.0; 
double unit_delay_22_signal; 
double saturation_23_signal; 
double w_radps_24_signal; 
double saturation_25_signal; 
double whlradius_26_signal; 
double v_wr_27_signal; 
double times100_28_signal; 
double abs_29_signal; 
double max_v_wr_30_signal; 
double binary_search_ratio_32_signal; 
double divide_33_signal; 
double switch_35_signal; 
double switch1_36_signal; 
double friction_force_n_37_signal; 
double sign_38_signal; 
double product_39_signal; 
double radius_40_signal; 
double subtract_41_signal; 
double ts_over_inertia_43_signal; 
double sum_44_signal; 
double w__rpm__45_signal; 
double negative3_46_signal; 
double fl_47_signal; 
double w_radps_48_signal; 
double saturation_49_signal; 
double whlradius_50_signal; 
double v_wr_51_signal; 
double times100_52_signal; 
double abs_53_signal; 
double max_v_wr_54_signal; 
double binary_search_ratio_56_signal; 
double divide_57_signal; 
double switch_59_signal; 
double switch1_60_signal; 
double friction_force_n_61_signal; 
double sign_62_signal; 
double product_63_signal; 
double radius_64_signal; 
double subtract_65_signal; 
double ts_over_inertia_67_signal; 
double sum_68_signal; 
double w__rpm__69_signal; 
double negative2_70_signal; 
double fr_71_signal; 
double w_radps_72_signal; 
double saturation_73_signal; 
double whlradius_74_signal; 
double v_wr_75_signal; 
double times100_76_signal; 
double abs_77_signal; 
double max_v_wr_78_signal; 
double binary_search_ratio_80_signal; 
double divide_81_signal; 
double switch_83_signal; 
double switch1_84_signal; 
double friction_force_n_85_signal; 
double sign_86_signal; 
double product_87_signal; 
double radius_88_signal; 
double subtract_89_signal; 
double ts_over_inertia_91_signal; 
double sum_92_signal; 
double w__rpm__93_signal; 
double negative1_94_signal; 
double rl_95_signal; 
double w_radps_96_signal; 
double saturation_97_signal; 
double whlradius_98_signal; 
double v_wr_99_signal; 
double times100_100_signal; 
double abs_101_signal; 
double max_v_wr_102_signal; 
double binary_search_ratio_104_signal; 
double divide_105_signal; 
double switch_107_signal; 
double switch1_108_signal; 
double friction_force_n_109_signal; 
double sign_110_signal; 
double product_111_signal; 
double radius_112_signal; 
double subtract_113_signal; 
double ts_over_inertia_115_signal; 
double sum_116_signal; 
double w__rpm__117_signal; 
double v__km_h__118_signal; 
double to_int_119_signal; 
double whespd__m_s__122_signal; 
double v__m_s__123_signal; 
double subtract_124_signal; 
double positive_125_signal; 
double times_10_126_signal; 
double slip_abs_on_times_10_127_signal; 
double relational_operator_128_signal; 
double lockdetect_131_signal; 
double threshold_10km_h_132_signal; 
double to_int_135_signal; 
double whespd__m_s__138_signal; 
double v__m_s__139_signal; 
double subtract_140_signal; 
double positive_141_signal; 
double times_10_142_signal; 
double slip_abs_on_times_10_143_signal; 
double relational_operator_144_signal; 
double lockdetect_147_signal; 
double threshold_10km_h_148_signal; 
double to_int1_151_signal; 
double driver_brake_160_signal;
double pedal_map_161_signal; 
double round_to_int_163_signal;  
double gain1_165_signal; 
double to_int_167_signal; 
double whespd__m_s__170_signal; 
double v__m_s__171_signal; 
double subtract_172_signal; 
double positive_173_signal; 
double times_10_174_signal; 
double slip_abs_on_times_10_175_signal; 
double relational_operator_176_signal; 
double lockdetect_179_signal; 
double threshold_10km_h_180_signal; 
double whespd__m_s__184_signal; 
double v__m_s__185_signal; 
double subtract_186_signal; 
double positive_187_signal; 
double times_10_188_signal; 
double slip_abs_on_times_10_189_signal; 
double relational_operator_190_signal; 
double lockdetect_193_signal; 
double threshold_10km_h_194_signal;  
double distribution_199_signal; 
double add_201_signal; 
double average_rpm_202_signal; 
double w__grad_s__203_signal; 
double v__km_h__204_signal; 

//other parameters
const double use_division=0.0;
const double T_veh=0.005;
const double M=2000.0; 
const double v_max=56.0; //in Simulink v_max=round(200/3.6);
const double w_max=112.0; //in Simulink w_max=round(v_max/R);
const double R=0.5;
const double m=20.0; 
const double I=m*R*R/2.0;
const double pi=3.14159265;
const double T_abs=0.01;
const double inf=1000000.0; //infinity in Simulink 
const double slip_abs_on=0.1;
const double T_spd_est=0.02;
const double distrib=0.25; //in Simulink distrib=[0.32, 0.29, 0.21, 0.19]
const double maxBrakeTorque=3000.0; 
const double T_brake_pedal=0.01;
const double T_brake_ctrl=0.02;

//Constants start (Total constants in the system 12) 
const double c_use_div_31_signal = use_division; 
const double c_zero_34_signal = 0.0; 
const double c_use_div_55_signal = use_division; 
const double c_zero_58_signal = 0.0; 
const double c_use_div_79_signal = use_division; 
const double c_zero_82_signal = 0.0; 
const double c_use_div_103_signal = use_division; 
const double c_zero_106_signal = 0.0; 
const double releasebrake_130_signal = 0.0; 
const double releasebrake_146_signal = 0.0; 
const double releasebrake_178_signal = 0.0; 
const double releasebrake_192_signal = 0.0; 
//Constants end</declaration>
	<template>
		<name>Monitor</name>
		<declaration>clock x,t;</declaration>
		<location id="id0" x="331" y="-314">
			<name x="321" y="-348">End</name>
			<label kind="invariant" x="306" y="-297">x'==0</label>
		</location>
		<location id="id1" x="212" y="-314">
			<name x="202" y="-348">L15</name>
		</location>
		<location id="id2" x="85" y="-314">
		</location>
		<location id="id3" x="-34" y="-314">
		</location>
		<location id="id4" x="-153" y="-314">
		</location>
		<location id="id5" x="-272" y="-314">
		</location>
		<location id="id6" x="-391" y="-314">
		</location>
		<location id="id7" x="-510" y="-314">
		</location>
		<location id="id8" x="-629" y="-314">
		</location>
		<location id="id9" x="-748" y="-374">
			<label kind="invariant" x="-731" y="-382">t&lt;=20</label>
		</location>
		<location id="id10" x="-748" y="-442">
			<name x="-758" y="-476">Init</name>
			<committed/>
		</location>
		<location id="id11" x="-748" y="-314">
		</location>
		<init ref="id10"/>
		<transition>
			<source ref="id9"/>
			<target ref="id11"/>
			<label kind="guard" x="-731" y="-357">t&gt;=0</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="102" y="-331">trigg[179]?</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="238" y="-331">trigg[180]?</label>
			<label kind="assignment" x="8" y="-280">ABSBrakeTorque=threshold_10km_h_180_signal</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-17" y="-331">trigg[176]?</label>
			<label kind="assignment" x="-102" y="-297">SlipRate=relational_operator_176_signal</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-136" y="-331">trigg[175]?</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-255" y="-331">trigg[174]?</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-374" y="-331">trigg[173]?</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-493" y="-331">trigg[172]?</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-612" y="-331">trigg[171]?</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-731" y="-331">trigg[170]?</label>
			<label kind="assignment" x="-731" y="-314">x:=0, 
VehicleSpeed=v__km_h__204_signal</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="assignment" x="-731" y="-408">t=0</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">driver_accelerate_12</name>
		<declaration>clock t, x;
const double sn = 12.0;

//double rep_seq_t[5]={0.0, 1.0, 10.5, 11.0, 100.0};
//double rep_seq_y[5]={0.0, 100.0, 100.0, 0.0, 0.0};

void blockRoutine(){ 
if (1.0&gt;=t) {driver_accelerate_12_signal=t*100.0;}
if (t&gt;1.0 &amp;&amp; 10.5&gt;=t) {driver_accelerate_12_signal=100.0; x=0;}
if (t&gt;10.5 &amp;&amp; 11.0&gt;=t) {driver_accelerate_12_signal=100.0-x*200.0;}
if (t&gt;11.0) {driver_accelerate_12_signal=0.0;}
}



void customInit(){}

void initialize(){
t = 0; x=0;
customInit();
}
</declaration>
		<location id="id12" x="93" y="-17">
			<name x="110" y="-25">Operate</name>
			<label kind="exponentialrate" x="110" y="0">1000</label>
		</location>
		<location id="id13" x="-178" y="-17">
			<name x="-203" y="-51">Start</name>
			<label kind="invariant" x="-238" y="0">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id13"/>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="guard" x="-85" y="-42">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-119" y="-17">initialize(), blockRoutine()</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id12"/>
			<label kind="assignment" x="93" y="-93">blockRoutine()</label>
			<nail x="93" y="-76"/>
			<nail x="187" y="-76"/>
			<nail x="187" y="51"/>
			<nail x="93" y="51"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">pedal_map_13</name>
		<declaration>clock t;
const double sn = 13.0;

void blockRoutine(){ 
if(driver_accelerate_12_signal &gt;= 100.0) {pedal_map_13_signal = 100.0;}
if(driver_accelerate_12_signal &lt;= 0.0) {pedal_map_13_signal=0.0;}
if(driver_accelerate_12_signal &lt; 100.0 &amp;&amp; driver_accelerate_12_signal&gt;0.0) {pedal_map_13_signal=driver_accelerate_12_signal;}
}



void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/HW_Accel_pedal/Pedal_map 
  // Signal name: pedal_map_13_signal; 
 // Predecessors (1): driver_accelerate_12 (brake_acc_nodiv/Driver_Accelerate); successors begin (1): to_int_14 (brake_acc_nodiv/LDM_Accel_peddal/to_int); </declaration>
		<location id="id14" x="93" y="-17">
			<name x="110" y="-25">Operate</name>
			<label kind="exponentialrate" x="110" y="0">1000</label>
		</location>
		<location id="id15" x="-144" y="-17">
			<name x="-169" y="-51">Start</name>
			<label kind="invariant" x="-204" y="0">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id15"/>
		<transition>
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="guard" x="-85" y="-42">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-119" y="-17">initialize(), blockRoutine()</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id14"/>
			<label kind="assignment" x="93" y="-93">blockRoutine()</label>
			<nail x="93" y="-76"/>
			<nail x="187" y="-76"/>
			<nail x="187" y="51"/>
			<nail x="93" y="51"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">to_int_14</name>
		<declaration>clock t;
const double sn = 14.0;

 bool rounding = true;
double i;
void blockRoutine()
            {
    rounding=true; 
    i=0.0;
    while(rounding)
            {
                i = i + 1.0;
                if (i &gt; pedal_map_13_signal)
                {
                    if(2 == 0)//floor
                        half_16_signal = i-1.0;
                    else if(2 == 1)//ceiling
                        half_16_signal = i;
                    else if(2 == 2)//round
                    {
                        if(i - pedal_map_13_signal &gt; 0.5)//floor
                            to_int_14_signal = i-1.0;
                        else//ceiling
                            to_int_14_signal = i;
                    rounding=false;
                    }
                }
            }
            }


void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/LDM_Accel_peddal/to_int 
  // Signal name: to_int_14_signal; 
 // Predecessors (1): pedal_map_13 (brake_acc_nodiv/HW_Accel_pedal/Pedal_map); successors begin (1): half_16 (brake_acc_nodiv/Vehicle_Body_Wheels/half); </declaration>
		<location id="id16" x="93" y="-17">
			<name x="110" y="-25">Operate</name>
			<label kind="exponentialrate" x="110" y="0">1000</label>
		</location>
		<location id="id17" x="-144" y="-17">
			<name x="-169" y="-51">Start</name>
			<label kind="invariant" x="-186" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id17"/>
		<transition>
			<source ref="id17"/>
			<target ref="id16"/>
			<label kind="guard" x="-68" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-59" y="-17">initialize(), blockRoutine()</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id16"/>
			<label kind="assignment" x="93" y="-93">blockRoutine()</label>
			<nail x="93" y="-76"/>
			<nail x="187" y="-76"/>
			<nail x="187" y="51"/>
			<nail x="93" y="51"/>
		</transition>
	</template>
	<template>
		<name>half_16</name>
		<declaration>const double ts = T_veh;
const double sn = 16.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 half_16_signal = to_int_14_signal * 5;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/half 
  // Signal name: half_16_signal; 
 // Predecessors (1): to_int_14 (brake_acc_nodiv/LDM_Accel_peddal/to_int); successors begin (4): rr_18 (brake_acc_nodiv/Vehicle_Body_Wheels/RR); rl_95 (brake_acc_nodiv/Vehicle_Body_Wheels/RL); fr_71 (brake_acc_nodiv/Vehicle_Body_Wheels/FR); fl_47 (brake_acc_nodiv/Vehicle_Body_Wheels/FL); </declaration>
		<location id="id18" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id19" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id20" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id20"/>
		<transition>
			<source ref="id18"/>
			<target ref="id18"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id18"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id19"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>negative_17</name>
		<declaration>const double ts = T_veh;
const double sn = 17.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 negative_17_signal = threshold_10km_h_148_signal * -1;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/negative 
  // Signal name: negative_17_signal; 
 // Predecessors (1): threshold_10km_h_148 (brake_acc_nodiv/ABS_RR_Wheel/Threshold_10km//h); successors begin (1): rr_18 (brake_acc_nodiv/Vehicle_Body_Wheels/RR); </declaration>
		<location id="id21" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id22" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id23" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id23"/>
		<transition>
			<source ref="id21"/>
			<target ref="id21"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id21"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id22"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>rr_18</name>
		<declaration>const double ts = T_veh;
const double sn = 18.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
if(threshold_10km_h_148_signal &gt; 0) {
rr_18_signal = negative_17_signal;
} else {
rr_18_signal = half_16_signal;
}
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RR 
  // Signal name: rr_18_signal; 
 // Predecessors (3): negative_17 (brake_acc_nodiv/Vehicle_Body_Wheels/negative); threshold_10km_h_148 (brake_acc_nodiv/ABS_RR_Wheel/Threshold_10km//h); half_16 (brake_acc_nodiv/Vehicle_Body_Wheels/half); successors begin (1): subtract_41 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Subtract); </declaration>
		<location id="id24" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id25" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-127" y="0">t &lt;= OFFSET</label>
		</location>
		<location id="id26" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id26"/>
		<transition>
			<source ref="id24"/>
			<target ref="id24"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="synchronisation" x="119" y="-110">trigg[18]!</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id24"/>
			<label kind="guard" x="-42" y="-42">t &gt;= OFFSET</label>
			<label kind="synchronisation" x="-34" y="-68">trigg[18]!</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id25"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>add_19</name>
		<declaration>const double ts = T_veh;
const double sn = 19.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
 add_19_signal = product_39_signal+product_111_signal+product_87_signal+product_63_signal; 
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/Vehicle Model/Add 
  // Signal name: add_19_signal; 
 // Predecessors (4): product_39 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Product); product_111 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/Product); product_87 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/Product); product_63 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/Product); successors begin (1): sample_time_over_mass_20 (brake_acc_nodiv/Vehicle_Body_Wheels/Vehicle Model/sample_time_over_mass); </declaration>
		<location id="id27" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id28" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id29" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id29"/>
		<transition>
			<source ref="id27"/>
			<target ref="id27"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id27"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id28"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>sample_time_over_mass_20</name>
		<declaration>const double ts = T_veh;
const double sn = 20.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 sample_time_over_mass_20_signal = add_19_signal * T_veh/M;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/Vehicle Model/sample_time_over_mass 
  // Signal name: sample_time_over_mass_20_signal; 
 // Predecessors (1): add_19 (brake_acc_nodiv/Vehicle_Body_Wheels/Vehicle Model/Add); successors begin (1): sum_21 (brake_acc_nodiv/Vehicle_Body_Wheels/Vehicle Model/Sum); </declaration>
		<location id="id30" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id31" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id32" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id32"/>
		<transition>
			<source ref="id30"/>
			<target ref="id30"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id30"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id31"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>sum_21</name>
		<declaration>const double ts = T_veh;
const double sn = 21.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
 sum_21_signal = sample_time_over_mass_20_signal+saturation_23_signal; 
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/Vehicle Model/Sum 
  // Signal name: sum_21_signal; 
 // Predecessors (2): sample_time_over_mass_20 (brake_acc_nodiv/Vehicle_Body_Wheels/Vehicle Model/sample_time_over_mass); saturation_23 (brake_acc_nodiv/Vehicle_Body_Wheels/Vehicle Model/Saturation); successors begin (1): unit_delay_22 (brake_acc_nodiv/Vehicle_Body_Wheels/Vehicle Model/Unit Delay); </declaration>
		<location id="id33" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id34" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id35" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id35"/>
		<transition>
			<source ref="id33"/>
			<target ref="id33"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id33"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id35"/>
			<target ref="id34"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>unit_delay_22</name>
		<declaration>const double ts = T_veh;
const double sn = 22.0;
const double OFFSET = 0.0;
clock t;

double tprev = 0.0;
double stepsize = 0.1;
double in_prev;

void blockRoutine()
{
unit_delay_22_signal = in_prev;
in_prev = sum_21_signal;
}

void customInit(){in_prev = 0.0;}


void initialize(){
t = 0;
customInit();
}// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/Vehicle Model/Unit Delay 
  // Signal name: unit_delay_22_signal; 
 // Predecessors (1): sum_21 (brake_acc_nodiv/Vehicle_Body_Wheels/Vehicle Model/Sum); successors begin (1): saturation_23 (brake_acc_nodiv/Vehicle_Body_Wheels/Vehicle Model/Saturation); </declaration>
		<location id="id36" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id37" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id38" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id38"/>
		<transition>
			<source ref="id36"/>
			<target ref="id36"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id37"/>
			<target ref="id36"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id38"/>
			<target ref="id37"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>saturation_23</name>
		<declaration>const double ts = T_veh;
const double sn = 23.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){ 
if(unit_delay_22_signal &gt;= v_max) {saturation_23_signal = v_max;}
if(unit_delay_22_signal &lt;= 0.0) {saturation_23_signal = 0.0;}
if(unit_delay_22_signal &lt; v_max &amp;&amp; unit_delay_22_signal&gt;0.0) {saturation_23_signal=unit_delay_22_signal;}
}



void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/Vehicle Model/Saturation 
  // Signal name: saturation_23_signal; 
 // Predecessors (1): unit_delay_22 (brake_acc_nodiv/Vehicle_Body_Wheels/Vehicle Model/Unit Delay); successors begin (10): v__km_h__118 (brake_acc_nodiv/Vehicle_Body_Wheels/v (km//h)); max_v_wr_30 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/max_v_wr); v_wr_27 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/v_wr); v_wr_99 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/v_wr); max_v_wr_102 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/max_v_wr); v_wr_75 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/v_wr); max_v_wr_78 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/max_v_wr); max_v_wr_54 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/max_v_wr); v_wr_51 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/v_wr); sum_21 (brake_acc_nodiv/Vehicle_Body_Wheels/Vehicle Model/Sum); </declaration>
		<location id="id39" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id40" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id41" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id41"/>
		<transition>
			<source ref="id39"/>
			<target ref="id39"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id40"/>
			<target ref="id39"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id41"/>
			<target ref="id40"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>w_radps_24</name>
		<declaration>const double ts = T_veh;
const double sn = 24.0;
const double OFFSET = 0.0;
clock t;

double tprev = 0.0;
double stepsize = 0.1;
double in_prev;
void blockRoutine()
{
w_radps_24_signal = in_prev;
in_prev=sum_44_signal; 
}

void customInit(){in_prev=0.0;}


void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/w_radps 
  // Signal name: w_radps_24_signal; 
 // Predecessors (1): sum_44 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Sum); successors begin (1): saturation_25 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Saturation); </declaration>
		<location id="id42" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id43" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id44" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id44"/>
		<transition>
			<source ref="id42"/>
			<target ref="id42"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id43"/>
			<target ref="id42"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id44"/>
			<target ref="id43"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>saturation_25</name>
		<declaration>const double ts = T_veh;
const double sn = 25.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){ 
if(w_radps_24_signal &gt;= w_max) {saturation_25_signal = w_max;}
if(w_radps_24_signal &lt;= 0.0) {saturation_25_signal=0.0;}
if(w_radps_24_signal&lt;w_max &amp;&amp; w_radps_24_signal&gt;0.0) {saturation_25_signal=w_radps_24_signal;}
}



void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Saturation 
  // Signal name: saturation_25_signal; 
 // Predecessors (1): w_radps_24 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/w_radps); successors begin (3): w__rpm__45 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/w (rpm)); whlradius_26 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/whlRadius); sum_44 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Sum); </declaration>
		<location id="id45" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id46" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id47" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id47"/>
		<transition>
			<source ref="id45"/>
			<target ref="id45"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id46"/>
			<target ref="id45"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id47"/>
			<target ref="id46"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>whlradius_26</name>
		<declaration>const double ts = T_veh;
const double sn = 26.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 whlradius_26_signal = saturation_25_signal * R;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/whlRadius 
  // Signal name: whlradius_26_signal; 
 // Predecessors (1): saturation_25 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Saturation); successors begin (2): max_v_wr_30 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/max_v_wr); v_wr_27 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/v_wr); </declaration>
		<location id="id48" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id49" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id50" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id50"/>
		<transition>
			<source ref="id48"/>
			<target ref="id48"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id49"/>
			<target ref="id48"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id50"/>
			<target ref="id49"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>v_wr_27</name>
		<declaration>const double ts = T_veh;
const double sn = 27.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
 v_wr_27_signal = whlradius_26_signal-saturation_23_signal; 
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/v_wr 
  // Signal name: v_wr_27_signal; 
 // Predecessors (2): whlradius_26 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/whlRadius); saturation_23 (brake_acc_nodiv/Vehicle_Body_Wheels/Vehicle Model/Saturation); successors begin (1): times100_28 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/times100); </declaration>
		<location id="id51" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id52" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id53" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id53"/>
		<transition>
			<source ref="id51"/>
			<target ref="id51"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id52"/>
			<target ref="id51"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id53"/>
			<target ref="id52"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>times100_28</name>
		<declaration>const double ts = T_veh;
const double sn = 28.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 times100_28_signal = v_wr_27_signal * 100;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/times100 
  // Signal name: times100_28_signal; 
 // Predecessors (1): v_wr_27 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/v_wr); successors begin (2): sign_38 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Sign); abs_29 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Abs); </declaration>
		<location id="id54" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id55" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id56" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id56"/>
		<transition>
			<source ref="id54"/>
			<target ref="id54"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id55"/>
			<target ref="id54"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id56"/>
			<target ref="id55"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>abs_29</name>
		<declaration>const double ts = T_veh;
const double sn = 29.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 abs_29_signal = times100_28_signal;
 if(abs_29_signal &lt; 0){
 abs_29_signal = abs_29_signal * -1.0; 
}
 }

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Abs 
  // Signal name: abs_29_signal; 
 // Predecessors (1): times100_28 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/times100); successors begin (2): divide_33 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/slip_ratio_percentage/Divide); _sfunction__0 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/slip_ratio_percentage/binary_search_ratio/ SFunction); </declaration>
		<location id="id57" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id58" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id59" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id59"/>
		<transition>
			<source ref="id57"/>
			<target ref="id57"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id58"/>
			<target ref="id57"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id59"/>
			<target ref="id58"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>max_v_wr_30</name>
		<declaration>const double ts = T_veh;
const double sn = 30.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
if(saturation_23_signal &gt;= saturation_23_signal&amp;&amp; saturation_23_signal &gt;= whlradius_26_signal)
    {max_v_wr_30_signal = saturation_23_signal;}
if(whlradius_26_signal &gt;= saturation_23_signal&amp;&amp; whlradius_26_signal &gt;= whlradius_26_signal)
    {max_v_wr_30_signal = whlradius_26_signal;}
;}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/max_v_wr 
  // Signal name: max_v_wr_30_signal; 
 // Predecessors (2): saturation_23 (brake_acc_nodiv/Vehicle_Body_Wheels/Vehicle Model/Saturation); whlradius_26 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/whlRadius); successors begin (3): _sfunction__0 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/slip_ratio_percentage/binary_search_ratio/ SFunction); divide_33 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/slip_ratio_percentage/Divide); switch_35 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/slip_ratio_percentage/Switch); </declaration>
		<location id="id60" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id61" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id62" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id62"/>
		<transition>
			<source ref="id60"/>
			<target ref="id60"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id61"/>
			<target ref="id60"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id62"/>
			<target ref="id61"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>binary_search_ratio_32</name>
		<declaration>double idx_min, idx_max, idx_mid;

const double ts = T_veh;
const double sn = 32.0;
const double OFFSET = 0.0;
clock t;

double abs_v_minus_wr; 
double max_v_wr; 

void blockRoutine(){}

void customInit(){}

void initialize(){
t = 0;
abs_v_minus_wr=abs_29_signal;
max_v_wr=max_v_wr_30_signal;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/slip_ratio_percentage/binary_search_ratio/ SFunction 
  // Signal name: _sfunction__32_signal; 
 // Predecessors (2): abs_29 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Abs); max_v_wr_30 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/max_v_wr); successors begin (2): _terminator__0 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/slip_ratio_percentage/binary_search_ratio/ Terminator); switch1_36 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/slip_ratio_percentage/Switch1); </declaration>
		<location id="id63" x="-816" y="-323">
			<committed/>
		</location>
		<location id="id64" x="-331" y="-323">
			<committed/>
		</location>
		<location id="id65" x="-153" y="-221">
			<name x="-229" y="-229">Discrete</name>
			<label kind="invariant" x="-221" y="-212">t &lt;= ts</label>
		</location>
		<location id="id66" x="-280" y="-637">
			<committed/>
		</location>
		<location id="id67" x="-323" y="-391">
			<committed/>
		</location>
		<location id="id68" x="-323" y="-459">
			<committed/>
		</location>
		<location id="id69" x="-816" y="-391">
			<committed/>
		</location>
		<location id="id70" x="-816" y="-459">
			<committed/>
		</location>
		<location id="id71" x="-561" y="-459">
			<committed/>
		</location>
		<location id="id72" x="-399" y="-722">
			<committed/>
		</location>
		<location id="id73" x="-399" y="-637">
			<committed/>
		</location>
		<location id="id74" x="-816" y="-637">
			<committed/>
		</location>
		<location id="id75" x="-816" y="-552">
			<committed/>
		</location>
		<location id="id76" x="-892" y="-501">
			<committed/>
		</location>
		<location id="id77" x="-816" y="-722">
			<committed/>
		</location>
		<location id="id78" x="-816" y="-816">
			<committed/>
		</location>
		<location id="id79" x="-280" y="-816">
			<committed/>
		</location>
		<location id="id80" x="-1003" y="-960">
			<name x="-1020" y="-994">Start</name>
			<label kind="invariant" x="-1079" y="-943">gtime &lt;= sn*IAT</label>
		</location>
		<location id="id81" x="-816" y="-960">
			<name x="-833" y="-994">Offset</name>
			<label kind="invariant" x="-799" y="-935">t &lt;= OFFSET</label>
		</location>
		<init ref="id80"/>
		<transition>
			<source ref="id81"/>
			<target ref="id78"/>
			<label kind="guard" x="-1095" y="-922">t &gt;= OFFSET</label>
		</transition>
		<transition>
			<source ref="id63"/>
			<target ref="id64"/>
			<label kind="guard" x="-799" y="-306">abs_v_minus_wr - idx_mid * max_v_wr &lt;= (idx_mid + 1.0)*max_v_wr - abs_v_minus_wr
/* if slip ratio is closer to idx_mid than idx_mid + 1 */</label>
		</transition>
		<transition>
			<source ref="id63"/>
			<target ref="id65"/>
			<label kind="guard" x="-1241" y="-229">abs_v_minus_wr - idx_mid * max_v_wr &gt; (idx_mid + 1.0)*max_v_wr - abs_v_minus_wr</label>
			<label kind="assignment" x="-1241" y="-255">binary_search_ratio_32_signal = idx_mid + 1.0,
t = 0, idx_min = 0.0, idx_max = 0.0, idx_mid = 0.0</label>
			<nail x="-816" y="-229"/>
		</transition>
		<transition>
			<source ref="id64"/>
			<target ref="id66"/>
			<label kind="assignment" x="-263" y="-578">binary_search_ratio_32_signal = idx_mid</label>
			<nail x="-280" y="-323"/>
			<nail x="-280" y="-518"/>
		</transition>
		<transition>
			<source ref="id66"/>
			<target ref="id65"/>
			<label kind="assignment" x="-246" y="-637">t = 0, idx_max = 0.0, idx_mid = 0.0, idx_min = 0.0</label>
			<nail x="-162" y="-637"/>
		</transition>
		<transition>
			<source ref="id67"/>
			<target ref="id68"/>
			<label kind="assignment" x="-314" y="-442">idx_min = idx_mid +1.0
/* choose upper part */</label>
		</transition>
		<transition>
			<source ref="id69"/>
			<target ref="id67"/>
			<label kind="guard" x="-782" y="-408">abs_v_minus_wr &gt; (idx_mid + 1.0)*max_v_wr
/* if slip ratio is larger than idx_mid + 1.0 */</label>
		</transition>
		<transition>
			<source ref="id70"/>
			<target ref="id69"/>
			<label kind="guard" x="-841" y="-433">abs_v_minus_wr &gt;= idx_mid * max_v_wr</label>
		</transition>
		<transition>
			<source ref="id71"/>
			<target ref="id68"/>
			<label kind="assignment" x="-518" y="-459">idx_max = idx_mid - 1.0
/* choose lower part */</label>
		</transition>
		<transition>
			<source ref="id72"/>
			<target ref="id73"/>
			<label kind="assignment" x="-510" y="-697">binary_search_ratio_32_signal = 100.0</label>
		</transition>
		<transition>
			<source ref="id73"/>
			<target ref="id66"/>
		</transition>
		<transition>
			<source ref="id74"/>
			<target ref="id73"/>
			<label kind="guard" x="-773" y="-654">idx_max &lt; idx_min</label>
			<label kind="assignment" x="-646" y="-629">binary_search_ratio_32_signal = 20.0
/* if idx_max &lt; idx_min, return 20%. 
   The case should never happen */</label>
		</transition>
		<transition>
			<source ref="id70"/>
			<target ref="id71"/>
			<label kind="guard" x="-799" y="-484">abs_v_minus_wr &lt; idx_mid * max_v_wr
/* if slip ratio is smaller than idx_mid */</label>
		</transition>
		<transition>
			<source ref="id68"/>
			<target ref="id74"/>
		</transition>
		<transition>
			<source ref="id69"/>
			<target ref="id63"/>
			<label kind="guard" x="-824" y="-365">abs_v_minus_wr &lt;= (idx_mid + 1.0)*max_v_wr</label>
		</transition>
		<transition>
			<source ref="id75"/>
			<target ref="id70"/>
			<label kind="assignment" x="-807" y="-527">idx_mid = (idx_min + idx_max)/2.0
/* the middle index */</label>
		</transition>
		<transition>
			<source ref="id74"/>
			<target ref="id75"/>
			<label kind="guard" x="-833" y="-595">idx_max &gt; idx_min</label>
		</transition>
		<transition>
			<source ref="id76"/>
			<target ref="id63"/>
			<label kind="assignment" x="-960" y="-399">idx_mid = idx_max</label>
		</transition>
		<transition>
			<source ref="id74"/>
			<target ref="id76"/>
			<label kind="guard" x="-1028" y="-629">idx_max == idx_min
/* decide if idx_min is idx_max
or idx_max + 1 */</label>
			<nail x="-824" y="-620"/>
		</transition>
		<transition>
			<source ref="id77"/>
			<target ref="id74"/>
			<label kind="guard" x="-969" y="-714">abs_v_minus_wr &lt; 100.0*max_v_wr</label>
			<label kind="assignment" x="-969" y="-697">idx_min = 0.0,
idx_max = 99.0 /* start binary search */</label>
		</transition>
		<transition>
			<source ref="id78"/>
			<target ref="id77"/>
			<label kind="guard" x="-1054" y="-790">abs_v_minus_wr &lt; 0.0 || max_v_wr &lt; 0.0 || 
abs_v_minus_wr &gt; 0.0 || max_v_wr &gt; 0.0</label>
		</transition>
		<transition>
			<source ref="id77"/>
			<target ref="id72"/>
			<label kind="guard" x="-773" y="-748">abs_v_minus_wr &gt;= 100.0*max_v_wr</label>
		</transition>
		<transition>
			<source ref="id79"/>
			<target ref="id66"/>
			<label kind="assignment" x="-382" y="-782">binary_search_ratio_32_signal = 0.0</label>
		</transition>
		<transition>
			<source ref="id78"/>
			<target ref="id79"/>
			<label kind="guard" x="-620" y="-841">abs_v_minus_wr == 0.0 || max_v_wr == 0.0</label>
		</transition>
		<transition>
			<source ref="id65"/>
			<target ref="id78"/>
			<label kind="guard" x="-484" y="-909">t &gt;= ts</label>
			<label kind="assignment" x="-764" y="-884">initialize()</label>
			<nail x="-93" y="-289"/>
			<nail x="-93" y="-884"/>
			<nail x="-782" y="-884"/>
			<nail x="-799" y="-850"/>
		</transition>
		<transition>
			<source ref="id80"/>
			<target ref="id81"/>
			<label kind="guard" x="-969" y="-986">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-935" y="-952">initialize()</label>
		</transition>
	</template>
	<template>
		<name>divide_33</name>
		<declaration>const double ts = T_veh;
const double sn = 33.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
divide_33_signal = abs_29_signal * max_v_wr_30_signal;}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/slip_ratio_percentage/Divide 
  // Signal name: divide_33_signal; 
 // Predecessors (2): abs_29 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Abs); max_v_wr_30 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/max_v_wr); successors begin (1): switch_35 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/slip_ratio_percentage/Switch); </declaration>
		<location id="id82" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id83" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id84" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id84"/>
		<transition>
			<source ref="id82"/>
			<target ref="id82"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id83"/>
			<target ref="id82"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id84"/>
			<target ref="id83"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>switch_35</name>
		<declaration>const double ts = T_veh;
const double sn = 35.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
if(max_v_wr_30_signal &gt; 0) {
switch_35_signal = divide_33_signal;
} else {
switch_35_signal = c_zero_34_signal;
}
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/slip_ratio_percentage/Switch 
  // Signal name: switch_35_signal; 
 // Predecessors (3): divide_33 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/slip_ratio_percentage/Divide); max_v_wr_30 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/max_v_wr); c_zero_34 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/slip_ratio_percentage/C_zero); successors begin (1): switch1_36 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/slip_ratio_percentage/Switch1); </declaration>
		<location id="id85" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id86" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id87" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id87"/>
		<transition>
			<source ref="id85"/>
			<target ref="id85"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id86"/>
			<target ref="id85"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id87"/>
			<target ref="id86"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>switch1_36</name>
		<declaration>const double ts = T_veh;
const double sn = 36.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
if(c_use_div_31_signal &gt; 0) {
switch1_36_signal = switch_35_signal;
} else {
switch1_36_signal = binary_search_ratio_32_signal;
}
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/slip_ratio_percentage/Switch1 
  // Signal name: switch1_36_signal; 
 // Predecessors (3): switch_35 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/slip_ratio_percentage/Switch); c_use_div_31 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/slip_ratio_percentage/C_use_div); _sfunction__0 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/slip_ratio_percentage/binary_search_ratio/ SFunction); successors begin (1): friction_force_n_37 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/friction_force_N); </declaration>
		<location id="id88" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id89" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id90" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id90"/>
		<transition>
			<source ref="id88"/>
			<target ref="id88"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id89"/>
			<target ref="id88"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id90"/>
			<target ref="id89"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>friction_force_n_37</name>
		<declaration>const double ts = T_veh;
const double sn = 37.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
if (switch1_36_signal&lt;0){friction_force_n_37_signal=0;}
if (switch1_36_signal&gt;=0 &amp;&amp; switch1_36_signal&lt;20.0) {friction_force_n_37_signal=switch1_36_signal*73.5;}
if (switch1_36_signal&gt;=20.0 &amp;&amp; switch1_36_signal&lt;30.0) {friction_force_n_37_signal=2450-49*switch1_36_signal;}
if (switch1_36_signal&gt;30.0){friction_force_n_37_signal=980;}
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/friction_force_N 
  // Signal name: friction_force_n_37_signal; 
 // Predecessors (1): switch1_36 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/slip_ratio_percentage/Switch1); successors begin (1): product_39 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Product); </declaration>
		<location id="id91" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id92" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id93" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id93"/>
		<transition>
			<source ref="id91"/>
			<target ref="id91"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id92"/>
			<target ref="id91"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id93"/>
			<target ref="id92"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>sign_38</name>
		<declaration>const double ts = T_veh;
const double sn = 38.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
if(times100_28_signal &lt; 0.0){sign_38_signal = -1.0;}
if(times100_28_signal == 0.0){sign_38_signal = 0.0;}
if(0.0&lt;times100_28_signal){sign_38_signal = 1.0;}}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Sign 
  // Signal name: sign_38_signal; 
 // Predecessors (1): times100_28 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/times100); successors begin (1): product_39 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Product); </declaration>
		<location id="id94" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id95" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id96" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id96"/>
		<transition>
			<source ref="id94"/>
			<target ref="id94"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id95"/>
			<target ref="id94"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id96"/>
			<target ref="id95"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>product_39</name>
		<declaration>const double ts = T_veh;
const double sn = 39.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
product_39_signal = friction_force_n_37_signal * sign_38_signal;}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Product 
  // Signal name: product_39_signal; 
 // Predecessors (2): friction_force_n_37 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/friction_force_N); sign_38 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Sign); successors begin (2): radius_40 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Radius); add_19 (brake_acc_nodiv/Vehicle_Body_Wheels/Vehicle Model/Add); </declaration>
		<location id="id97" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id98" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id99" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id99"/>
		<transition>
			<source ref="id97"/>
			<target ref="id97"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id98"/>
			<target ref="id97"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id99"/>
			<target ref="id98"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>radius_40</name>
		<declaration>const double ts = T_veh;
const double sn = 40.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 radius_40_signal = product_39_signal * R;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Radius 
  // Signal name: radius_40_signal; 
 // Predecessors (1): product_39 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Product); successors begin (1): subtract_41 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Subtract); </declaration>
		<location id="id100" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id101" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id102" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id102"/>
		<transition>
			<source ref="id100"/>
			<target ref="id100"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id101"/>
			<target ref="id100"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id102"/>
			<target ref="id101"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>subtract_41</name>
		<declaration>const double ts = T_veh;
const double sn = 41.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
 subtract_41_signal = rr_18_signal-radius_40_signal; 
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Subtract 
  // Signal name: subtract_41_signal; 
 // Predecessors (2): rr_18 (brake_acc_nodiv/Vehicle_Body_Wheels/RR); radius_40 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Radius); successors begin (1): ts_over_inertia_43 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Ts_over_Inertia); </declaration>
		<location id="id103" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id104" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id105" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id105"/>
		<transition>
			<source ref="id103"/>
			<target ref="id103"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id104"/>
			<target ref="id103"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id105"/>
			<target ref="id104"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>ts_over_inertia_43</name>
		<declaration>const double ts = T_veh;
const double sn = 43.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 ts_over_inertia_43_signal = subtract_41_signal * T_veh/I;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Ts_over_Inertia 
  // Signal name: ts_over_inertia_43_signal; 
 // Predecessors (1): subtract_41 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Subtract); successors begin (1): sum_44 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Sum); </declaration>
		<location id="id106" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id107" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id108" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id108"/>
		<transition>
			<source ref="id106"/>
			<target ref="id106"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id107"/>
			<target ref="id106"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id108"/>
			<target ref="id107"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>sum_44</name>
		<declaration>const double ts = T_veh;
const double sn = 44.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
 sum_44_signal = ts_over_inertia_43_signal+saturation_25_signal; 
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Sum 
  // Signal name: sum_44_signal; 
 // Predecessors (2): ts_over_inertia_43 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Ts_over_Inertia); saturation_25 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Saturation); successors begin (1): w_radps_24 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/w_radps); </declaration>
		<location id="id109" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id110" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id111" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id111"/>
		<transition>
			<source ref="id109"/>
			<target ref="id109"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id110"/>
			<target ref="id109"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id111"/>
			<target ref="id110"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>w__rpm__45</name>
		<declaration>const double ts = T_veh;
const double sn = 45.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 w__rpm__45_signal = saturation_25_signal * 30/pi;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/w (rpm) 
  // Signal name: w__rpm__45_signal; 
 // Predecessors (1): saturation_25 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Saturation); successors begin (1): to_int_135 (brake_acc_nodiv/HW_RREncoder/to_int); </declaration>
		<location id="id112" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id113" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id114" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id114"/>
		<transition>
			<source ref="id112"/>
			<target ref="id112"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id113"/>
			<target ref="id112"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id114"/>
			<target ref="id113"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>negative3_46</name>
		<declaration>const double ts = T_veh;
const double sn = 46.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 negative3_46_signal = threshold_10km_h_194_signal * -1;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/negative3 
  // Signal name: negative3_46_signal; 
 // Predecessors (1): threshold_10km_h_194 (brake_acc_nodiv/ABS_FL_Wheel/Threshold_10km//h); successors begin (1): fl_47 (brake_acc_nodiv/Vehicle_Body_Wheels/FL); </declaration>
		<location id="id115" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id116" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id117" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id117"/>
		<transition>
			<source ref="id115"/>
			<target ref="id115"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id116"/>
			<target ref="id115"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id117"/>
			<target ref="id116"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>fl_47</name>
		<declaration>const double ts = T_veh;
const double sn = 47.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
if(threshold_10km_h_194_signal &gt; 0) {fl_47_signal = negative3_46_signal;} 
else {fl_47_signal = half_16_signal;}
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FL 
  // Signal name: fl_47_signal; 
 // Predecessors (3): negative3_46 (brake_acc_nodiv/Vehicle_Body_Wheels/negative3); threshold_10km_h_194 (brake_acc_nodiv/ABS_FL_Wheel/Threshold_10km//h); half_16 (brake_acc_nodiv/Vehicle_Body_Wheels/half); successors begin (1): subtract_65 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/Subtract); </declaration>
		<location id="id118" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id119" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id120" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id120"/>
		<transition>
			<source ref="id118"/>
			<target ref="id118"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id119"/>
			<target ref="id118"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id120"/>
			<target ref="id119"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>w_radps_48</name>
		<declaration>const double ts = T_veh;
const double sn = 48.0;
const double OFFSET = 0.0;
clock t;

double tprev = 0.0;
double stepsize = 0.1;
double in_prev;

void blockRoutine(){
w_radps_48_signal = in_prev;
in_prev=sum_68_signal; 
}

void customInit(){in_prev=0.0;}


void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/w_radps 
  // Signal name: w_radps_48_signal; 
 // Predecessors (1): sum_68 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/Sum); successors begin (1): saturation_49 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/Saturation); </declaration>
		<location id="id121" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id122" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id123" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id123"/>
		<transition>
			<source ref="id121"/>
			<target ref="id121"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id122"/>
			<target ref="id121"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id123"/>
			<target ref="id122"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>saturation_49</name>
		<declaration>const double ts = T_veh;
const double sn = 49.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){ 
if(w_radps_48_signal &gt;= w_max) {saturation_49_signal = w_max;}
if(w_radps_48_signal &lt;= 0.0) {saturation_49_signal = 0.0;}
if(w_radps_48_signal&lt;w_max &amp;&amp; w_radps_48_signal&gt;0.0) {saturation_49_signal=w_radps_48_signal;} 
}



void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/Saturation 
  // Signal name: saturation_49_signal; 
 // Predecessors (1): w_radps_48 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/w_radps); successors begin (3): whlradius_50 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/whlRadius); sum_68 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/Sum); w__rpm__69 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/w (rpm)); </declaration>
		<location id="id124" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id125" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id126" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id126"/>
		<transition>
			<source ref="id124"/>
			<target ref="id124"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id125"/>
			<target ref="id124"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id126"/>
			<target ref="id125"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>whlradius_50</name>
		<declaration>const double ts = T_veh;
const double sn = 50.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 whlradius_50_signal = saturation_49_signal * R;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/whlRadius 
  // Signal name: whlradius_50_signal; 
 // Predecessors (1): saturation_49 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/Saturation); successors begin (2): v_wr_51 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/v_wr); max_v_wr_54 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/max_v_wr); </declaration>
		<location id="id127" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id128" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id129" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id129"/>
		<transition>
			<source ref="id127"/>
			<target ref="id127"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id128"/>
			<target ref="id127"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id129"/>
			<target ref="id128"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>v_wr_51</name>
		<declaration>const double ts = T_veh;
const double sn = 51.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
 v_wr_51_signal = whlradius_50_signal-saturation_23_signal; 
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/v_wr 
  // Signal name: v_wr_51_signal; 
 // Predecessors (2): whlradius_50 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/whlRadius); saturation_23 (brake_acc_nodiv/Vehicle_Body_Wheels/Vehicle Model/Saturation); successors begin (1): times100_52 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/times100); </declaration>
		<location id="id130" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id131" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id132" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id132"/>
		<transition>
			<source ref="id130"/>
			<target ref="id130"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id131"/>
			<target ref="id130"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id132"/>
			<target ref="id131"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>times100_52</name>
		<declaration>const double ts = T_veh;
const double sn = 52.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 times100_52_signal = v_wr_51_signal * 100;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/times100 
  // Signal name: times100_52_signal; 
 // Predecessors (1): v_wr_51 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/v_wr); successors begin (2): sign_62 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/Sign); abs_53 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/Abs); </declaration>
		<location id="id133" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id134" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id135" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id135"/>
		<transition>
			<source ref="id133"/>
			<target ref="id133"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id134"/>
			<target ref="id133"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id135"/>
			<target ref="id134"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>abs_53</name>
		<declaration>const double ts = T_veh;
const double sn = 53.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 abs_53_signal = times100_52_signal;
 if(abs_53_signal &lt; 0){
 abs_53_signal = abs_53_signal * -1.0; 
}
 }

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/Abs 
  // Signal name: abs_53_signal; 
 // Predecessors (1): times100_52 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/times100); successors begin (2): _sfunction__0 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/slip_ratio_percentage/binary_search_ratio/ SFunction); divide_57 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/slip_ratio_percentage/Divide); </declaration>
		<location id="id136" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id137" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id138" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id138"/>
		<transition>
			<source ref="id136"/>
			<target ref="id136"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id137"/>
			<target ref="id136"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id138"/>
			<target ref="id137"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>max_v_wr_54</name>
		<declaration>const double ts = T_veh;
const double sn = 54.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
if(saturation_23_signal &gt;= saturation_23_signal&amp;&amp; saturation_23_signal &gt;= whlradius_50_signal)
    {max_v_wr_54_signal = saturation_23_signal;}
if(whlradius_50_signal &gt;= saturation_23_signal&amp;&amp; whlradius_50_signal &gt;= whlradius_50_signal)
    {max_v_wr_54_signal = whlradius_50_signal;}
;}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/max_v_wr 
  // Signal name: max_v_wr_54_signal; 
 // Predecessors (2): saturation_23 (brake_acc_nodiv/Vehicle_Body_Wheels/Vehicle Model/Saturation); whlradius_50 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/whlRadius); successors begin (3): divide_57 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/slip_ratio_percentage/Divide); switch_59 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/slip_ratio_percentage/Switch); _sfunction__0 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/slip_ratio_percentage/binary_search_ratio/ SFunction); </declaration>
		<location id="id139" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id140" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id141" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id141"/>
		<transition>
			<source ref="id139"/>
			<target ref="id139"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id140"/>
			<target ref="id139"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id141"/>
			<target ref="id140"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>binary_search_ratio_56</name>
		<declaration>double idx_min, idx_max, idx_mid;

const double ts = T_veh;
const double sn = 56.0;
const double OFFSET = 0.0;
clock t;

double abs_v_minus_wr; 
double max_v_wr; 

void blockRoutine(){}

void customInit(){}

void initialize(){
t = 0;
abs_v_minus_wr=abs_53_signal;
max_v_wr=max_v_wr_54_signal;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/slip_ratio_percentage/binary_search_ratio/ SFunction 
  // Signal name: _sfunction__56_signal; 
 // Predecessors (2): abs_53 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Abs); max_v_wr_54 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/max_v_wr); successors begin (2): _terminator__0 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/slip_ratio_percentage/binary_search_ratio/ Terminator); switch1_36 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/slip_ratio_percentage/Switch1); </declaration>
		<location id="id142" x="-816" y="-323">
			<committed/>
		</location>
		<location id="id143" x="-331" y="-323">
			<committed/>
		</location>
		<location id="id144" x="-153" y="-221">
			<name x="-229" y="-229">Discrete</name>
			<label kind="invariant" x="-221" y="-212">t &lt;= ts</label>
		</location>
		<location id="id145" x="-280" y="-637">
			<committed/>
		</location>
		<location id="id146" x="-323" y="-391">
			<committed/>
		</location>
		<location id="id147" x="-323" y="-459">
			<committed/>
		</location>
		<location id="id148" x="-816" y="-391">
			<committed/>
		</location>
		<location id="id149" x="-816" y="-459">
			<committed/>
		</location>
		<location id="id150" x="-561" y="-459">
			<committed/>
		</location>
		<location id="id151" x="-399" y="-722">
			<committed/>
		</location>
		<location id="id152" x="-399" y="-637">
			<committed/>
		</location>
		<location id="id153" x="-816" y="-637">
			<committed/>
		</location>
		<location id="id154" x="-816" y="-552">
			<committed/>
		</location>
		<location id="id155" x="-892" y="-501">
			<committed/>
		</location>
		<location id="id156" x="-816" y="-722">
			<committed/>
		</location>
		<location id="id157" x="-816" y="-816">
			<committed/>
		</location>
		<location id="id158" x="-280" y="-816">
			<committed/>
		</location>
		<location id="id159" x="-1003" y="-960">
			<name x="-1020" y="-994">Start</name>
			<label kind="invariant" x="-1079" y="-943">gtime &lt;= sn*IAT</label>
		</location>
		<location id="id160" x="-816" y="-960">
			<name x="-833" y="-994">Offset</name>
			<label kind="invariant" x="-799" y="-935">t &lt;= OFFSET</label>
		</location>
		<init ref="id159"/>
		<transition>
			<source ref="id160"/>
			<target ref="id157"/>
			<label kind="guard" x="-1095" y="-922">t &gt;= OFFSET</label>
		</transition>
		<transition>
			<source ref="id142"/>
			<target ref="id143"/>
			<label kind="guard" x="-782" y="-340">abs_v_minus_wr - idx_mid * max_v_wr &lt;= (idx_mid + 1.0)*max_v_wr - abs_v_minus_wr
/* if slip ratio is closer to idx_mid than idx_mid + 1 */</label>
		</transition>
		<transition>
			<source ref="id142"/>
			<target ref="id144"/>
			<label kind="guard" x="-1096" y="-263">abs_v_minus_wr - idx_mid * max_v_wr &gt; (idx_mid + 1.0)*max_v_wr - abs_v_minus_wr</label>
			<label kind="assignment" x="-1028" y="-229">binary_search_ratio_56_signal = idx_mid + 1.0,
t = 0, idx_min = 0.0, idx_max = 0.0, idx_mid = 0.0</label>
			<nail x="-816" y="-229"/>
		</transition>
		<transition>
			<source ref="id143"/>
			<target ref="id145"/>
			<label kind="assignment" x="-263" y="-578">binary_search_ratio_56_signal = idx_mid</label>
			<nail x="-280" y="-323"/>
			<nail x="-280" y="-518"/>
		</transition>
		<transition>
			<source ref="id145"/>
			<target ref="id144"/>
			<label kind="assignment" x="-246" y="-637">t = 0, idx_max = 0.0, idx_mid = 0.0, idx_min = 0.0</label>
			<nail x="-162" y="-637"/>
		</transition>
		<transition>
			<source ref="id146"/>
			<target ref="id147"/>
			<label kind="assignment" x="-314" y="-442">idx_min = idx_mid +1.0
/* choose upper part */</label>
		</transition>
		<transition>
			<source ref="id148"/>
			<target ref="id146"/>
			<label kind="guard" x="-731" y="-416">abs_v_minus_wr &gt; (idx_mid + 1.0)*max_v_wr
/* if slip ratio is larger than idx_mid + 1.0 */</label>
		</transition>
		<transition>
			<source ref="id149"/>
			<target ref="id148"/>
			<label kind="guard" x="-841" y="-442">abs_v_minus_wr &gt;= idx_mid * max_v_wr</label>
		</transition>
		<transition>
			<source ref="id150"/>
			<target ref="id147"/>
			<label kind="assignment" x="-518" y="-459">idx_max = idx_mid - 1.0
/* choose lower part */</label>
		</transition>
		<transition>
			<source ref="id151"/>
			<target ref="id152"/>
			<label kind="assignment" x="-510" y="-697">binary_search_ratio_56_signal = 100.0</label>
		</transition>
		<transition>
			<source ref="id152"/>
			<target ref="id145"/>
		</transition>
		<transition>
			<source ref="id153"/>
			<target ref="id152"/>
			<label kind="guard" x="-603" y="-663">idx_max &lt; idx_min</label>
			<label kind="assignment" x="-646" y="-629">binary_search_ratio_56_signal = 20.0
/* if idx_max &lt; idx_min, return 20%. 
   The case should never happen */</label>
		</transition>
		<transition>
			<source ref="id149"/>
			<target ref="id150"/>
			<label kind="guard" x="-790" y="-476">abs_v_minus_wr &lt; idx_mid * max_v_wr
/* if slip ratio is smaller than idx_mid */</label>
		</transition>
		<transition>
			<source ref="id147"/>
			<target ref="id153"/>
		</transition>
		<transition>
			<source ref="id148"/>
			<target ref="id142"/>
			<label kind="guard" x="-816" y="-365">abs_v_minus_wr &lt;= (idx_mid + 1.0)*max_v_wr</label>
		</transition>
		<transition>
			<source ref="id154"/>
			<target ref="id149"/>
			<label kind="assignment" x="-807" y="-527">idx_mid = (idx_min + idx_max)/2.0
/* the middle index */</label>
		</transition>
		<transition>
			<source ref="id153"/>
			<target ref="id154"/>
			<label kind="guard" x="-833" y="-595">idx_max &gt; idx_min</label>
		</transition>
		<transition>
			<source ref="id155"/>
			<target ref="id142"/>
			<label kind="assignment" x="-960" y="-399">idx_mid = idx_max</label>
		</transition>
		<transition>
			<source ref="id153"/>
			<target ref="id155"/>
			<label kind="guard" x="-1028" y="-629">idx_max == idx_min
/* decide if idx_min is idx_max
or idx_max + 1 */</label>
			<nail x="-824" y="-620"/>
		</transition>
		<transition>
			<source ref="id156"/>
			<target ref="id153"/>
			<label kind="guard" x="-926" y="-705">abs_v_minus_wr &lt; 100.0*max_v_wr</label>
			<label kind="assignment" x="-799" y="-697">idx_min = 0.0,
idx_max = 99.0 /* start binary search */</label>
		</transition>
		<transition>
			<source ref="id157"/>
			<target ref="id156"/>
			<label kind="guard" x="-909" y="-790">abs_v_minus_wr &lt; 0.0 || max_v_wr &lt; 0.0 ||
abs_v_minus_wr &gt; 0.0 || max_v_wr &gt; 0.0</label>
		</transition>
		<transition>
			<source ref="id156"/>
			<target ref="id151"/>
			<label kind="guard" x="-773" y="-748">abs_v_minus_wr &gt;= 100.0*max_v_wr</label>
		</transition>
		<transition>
			<source ref="id158"/>
			<target ref="id145"/>
			<label kind="assignment" x="-382" y="-782">binary_search_ratio_56_signal = 0.0</label>
		</transition>
		<transition>
			<source ref="id157"/>
			<target ref="id158"/>
			<label kind="guard" x="-620" y="-841">abs_v_minus_wr == 0.0 || max_v_wr == 0.0</label>
		</transition>
		<transition>
			<source ref="id144"/>
			<target ref="id157"/>
			<label kind="guard" x="-484" y="-909">t &gt;= ts</label>
			<label kind="assignment" x="-493" y="-884">initialize()</label>
			<nail x="-93" y="-289"/>
			<nail x="-93" y="-884"/>
			<nail x="-782" y="-884"/>
			<nail x="-799" y="-850"/>
		</transition>
		<transition>
			<source ref="id159"/>
			<target ref="id160"/>
			<label kind="guard" x="-969" y="-986">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-935" y="-952">initialize()</label>
		</transition>
	</template>
	<template>
		<name>divide_57</name>
		<declaration>const double ts = T_veh;
const double sn = 57.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
divide_57_signal = abs_53_signal * max_v_wr_54_signal;}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/slip_ratio_percentage/Divide 
  // Signal name: divide_57_signal; 
 // Predecessors (2): abs_53 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/Abs); max_v_wr_54 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/max_v_wr); successors begin (1): switch_59 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/slip_ratio_percentage/Switch); </declaration>
		<location id="id161" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id162" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id163" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id163"/>
		<transition>
			<source ref="id161"/>
			<target ref="id161"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id162"/>
			<target ref="id161"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id163"/>
			<target ref="id162"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>switch_59</name>
		<declaration>const double ts = T_veh;
const double sn = 59.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
if(max_v_wr_54_signal &gt; 0) {
switch_59_signal = divide_57_signal;
} else {
switch_59_signal = c_zero_58_signal;
}
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/slip_ratio_percentage/Switch 
  // Signal name: switch_59_signal; 
 // Predecessors (3): divide_57 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/slip_ratio_percentage/Divide); max_v_wr_54 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/max_v_wr); c_zero_58 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/slip_ratio_percentage/C_zero); successors begin (1): switch1_60 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/slip_ratio_percentage/Switch1); </declaration>
		<location id="id164" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id165" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id166" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id166"/>
		<transition>
			<source ref="id164"/>
			<target ref="id164"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id165"/>
			<target ref="id164"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id166"/>
			<target ref="id165"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>switch1_60</name>
		<declaration>const double ts = T_veh;
const double sn = 60.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
if(c_use_div_55_signal &gt; 0) {
switch1_60_signal = switch_59_signal;
} else {
switch1_60_signal = binary_search_ratio_56_signal;
}
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/slip_ratio_percentage/Switch1 
  // Signal name: switch1_60_signal; 
 // Predecessors (3): switch_59 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/slip_ratio_percentage/Switch); c_use_div_55 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/slip_ratio_percentage/C_use_div); _sfunction__0 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/slip_ratio_percentage/binary_search_ratio/ SFunction); successors begin (1): friction_force_n_61 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/friction_force_N); </declaration>
		<location id="id167" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id168" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id169" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id169"/>
		<transition>
			<source ref="id167"/>
			<target ref="id167"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id168"/>
			<target ref="id167"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id169"/>
			<target ref="id168"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>friction_force_n_61</name>
		<declaration>const double ts = T_veh;
const double sn = 61.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
if (switch1_60_signal&lt;0){friction_force_n_61_signal=0;}
if (switch1_60_signal&gt;=0 &amp;&amp; switch1_60_signal&lt;20.0) {friction_force_n_61_signal=switch1_60_signal*73.5;}
if (switch1_60_signal&gt;=20.0 &amp;&amp; switch1_60_signal&lt;30.0) {friction_force_n_61_signal=2450-49*switch1_60_signal;}
if (switch1_60_signal&gt;30.0){friction_force_n_61_signal=980;}
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/friction_force_N 
  // Signal name: friction_force_n_61_signal; 
 // Predecessors (1): switch1_60 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/slip_ratio_percentage/Switch1); successors begin (1): product_63 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/Product); </declaration>
		<location id="id170" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id171" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id172" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id172"/>
		<transition>
			<source ref="id170"/>
			<target ref="id170"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id171"/>
			<target ref="id170"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id172"/>
			<target ref="id171"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>sign_62</name>
		<declaration>const double ts = T_veh;
const double sn = 62.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
if(times100_52_signal &lt; 0.0){sign_62_signal = -1.0;}
if(times100_52_signal == 0.0){sign_62_signal = 0.0;}
if(0.0&lt;times100_52_signal){times100_52_signal = 1.0;}}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/Sign 
  // Signal name: sign_62_signal; 
 // Predecessors (1): times100_52 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/times100); successors begin (1): product_63 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/Product); </declaration>
		<location id="id173" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id174" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id175" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id175"/>
		<transition>
			<source ref="id173"/>
			<target ref="id173"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id174"/>
			<target ref="id173"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id175"/>
			<target ref="id174"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>product_63</name>
		<declaration>const double ts = T_veh;
const double sn = 63.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
product_63_signal = friction_force_n_61_signal * sign_62_signal;}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/Product 
  // Signal name: product_63_signal; 
 // Predecessors (2): friction_force_n_61 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/friction_force_N); sign_62 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/Sign); successors begin (2): add_19 (brake_acc_nodiv/Vehicle_Body_Wheels/Vehicle Model/Add); radius_64 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/Radius); </declaration>
		<location id="id176" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id177" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id178" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id178"/>
		<transition>
			<source ref="id176"/>
			<target ref="id176"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id177"/>
			<target ref="id176"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id178"/>
			<target ref="id177"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>radius_64</name>
		<declaration>const double ts = T_veh;
const double sn = 64.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 radius_64_signal = product_63_signal * R;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/Radius 
  // Signal name: radius_64_signal; 
 // Predecessors (1): product_63 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/Product); successors begin (1): subtract_65 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/Subtract); </declaration>
		<location id="id179" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id180" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id181" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id181"/>
		<transition>
			<source ref="id179"/>
			<target ref="id179"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id180"/>
			<target ref="id179"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id181"/>
			<target ref="id180"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>subtract_65</name>
		<declaration>const double ts = T_veh;
const double sn = 65.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
 subtract_65_signal = fl_47_signal-radius_64_signal; 
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/Subtract 
  // Signal name: subtract_65_signal; 
 // Predecessors (2): fl_47 (brake_acc_nodiv/Vehicle_Body_Wheels/FL); radius_64 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/Radius); successors begin (1): ts_over_inertia_67 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/Ts_over_Inertia); </declaration>
		<location id="id182" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id183" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id184" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id184"/>
		<transition>
			<source ref="id182"/>
			<target ref="id182"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id183"/>
			<target ref="id182"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id184"/>
			<target ref="id183"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>ts_over_inertia_67</name>
		<declaration>const double ts = T_veh;
const double sn = 67.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 ts_over_inertia_67_signal = subtract_65_signal * T_veh/I;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/Ts_over_Inertia 
  // Signal name: ts_over_inertia_67_signal; 
 // Predecessors (1): subtract_65 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/Subtract); successors begin (1): sum_68 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/Sum); </declaration>
		<location id="id185" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id186" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id187" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id187"/>
		<transition>
			<source ref="id185"/>
			<target ref="id185"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id186"/>
			<target ref="id185"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id187"/>
			<target ref="id186"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>sum_68</name>
		<declaration>const double ts = T_veh;
const double sn = 68.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
 sum_68_signal = ts_over_inertia_67_signal+saturation_49_signal; 
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/Sum 
  // Signal name: sum_68_signal; 
 // Predecessors (2): ts_over_inertia_67 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/Ts_over_Inertia); saturation_49 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/Saturation); successors begin (1): w_radps_48 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/w_radps); </declaration>
		<location id="id188" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id189" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id190" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id190"/>
		<transition>
			<source ref="id188"/>
			<target ref="id188"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id189"/>
			<target ref="id188"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id190"/>
			<target ref="id189"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>w__rpm__69</name>
		<declaration>const double ts = T_veh;
const double sn = 69.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 w__rpm__69_signal = saturation_49_signal * 30/pi;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/w (rpm) 
  // Signal name: w__rpm__69_signal; 
 // Predecessors (1): saturation_49 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/Saturation); successors begin (1): to_int1_151 (brake_acc_nodiv/HW_FLEncoder/to_int1); </declaration>
		<location id="id191" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id192" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id193" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id193"/>
		<transition>
			<source ref="id191"/>
			<target ref="id191"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id192"/>
			<target ref="id191"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id193"/>
			<target ref="id192"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>negative2_70</name>
		<declaration>const double ts = T_veh;
const double sn = 70.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 negative2_70_signal = threshold_10km_h_132_signal * -1;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/negative2 
  // Signal name: negative2_70_signal; 
 // Predecessors (1): threshold_10km_h_132 (brake_acc_nodiv/ABS_FR_Wheel/Threshold_10km//h); successors begin (1): fr_71 (brake_acc_nodiv/Vehicle_Body_Wheels/FR); </declaration>
		<location id="id194" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id195" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id196" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id196"/>
		<transition>
			<source ref="id194"/>
			<target ref="id194"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id195"/>
			<target ref="id194"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id196"/>
			<target ref="id195"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>fr_71</name>
		<declaration>const double ts = T_veh;
const double sn = 71.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
if(threshold_10km_h_132_signal &gt; 0) {fr_71_signal = negative2_70_signal;} 
else {fr_71_signal = half_16_signal;}
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FR 
  // Signal name: fr_71_signal; 
 // Predecessors (3): negative2_70 (brake_acc_nodiv/Vehicle_Body_Wheels/negative2); threshold_10km_h_132 (brake_acc_nodiv/ABS_FR_Wheel/Threshold_10km//h); half_16 (brake_acc_nodiv/Vehicle_Body_Wheels/half); successors begin (1): subtract_89 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/Subtract); </declaration>
		<location id="id197" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id198" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id199" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id199"/>
		<transition>
			<source ref="id197"/>
			<target ref="id197"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id198"/>
			<target ref="id197"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id199"/>
			<target ref="id198"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>w_radps_72</name>
		<declaration>const double ts = T_veh;
const double sn = 72.0;
const double OFFSET = 0.0;
clock t;

double tprev = 0.0;
double stepsize = 0.1;
double in_prev;
void blockRoutine()
{
w_radps_72_signal = in_prev;
in_prev=sum_92_signal; 
}

void customInit(){in_prev=0.0;}


void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/w_radps 
  // Signal name: w_radps_72_signal; 
 // Predecessors (1): sum_92 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/Sum); successors begin (1): saturation_73 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/Saturation); </declaration>
		<location id="id200" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id201" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id202" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id202"/>
		<transition>
			<source ref="id200"/>
			<target ref="id200"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id201"/>
			<target ref="id200"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id202"/>
			<target ref="id201"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>saturation_73</name>
		<declaration>const double ts = T_veh;
const double sn = 73.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){ 
if(w_radps_72_signal &gt;= w_max) {saturation_73_signal = w_max;}
if(w_radps_72_signal &lt;= 0.0) {saturation_73_signal = 0.0;}
if(w_radps_72_signal&lt;w_max &amp;&amp; w_radps_72_signal&gt;0.0) {saturation_73_signal=w_radps_72_signal;}
}



void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/Saturation 
  // Signal name: saturation_73_signal; 
 // Predecessors (1): w_radps_72 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/w_radps); successors begin (3): w__rpm__93 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/w (rpm)); whlradius_74 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/whlRadius); sum_92 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/Sum); </declaration>
		<location id="id203" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id204" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id205" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id205"/>
		<transition>
			<source ref="id203"/>
			<target ref="id203"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id204"/>
			<target ref="id203"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id205"/>
			<target ref="id204"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>whlradius_74</name>
		<declaration>const double ts = T_veh;
const double sn = 74.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 whlradius_74_signal = saturation_73_signal * R;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/whlRadius 
  // Signal name: whlradius_74_signal; 
 // Predecessors (1): saturation_73 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/Saturation); successors begin (2): v_wr_75 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/v_wr); max_v_wr_78 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/max_v_wr); </declaration>
		<location id="id206" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id207" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id208" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id208"/>
		<transition>
			<source ref="id206"/>
			<target ref="id206"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id207"/>
			<target ref="id206"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id208"/>
			<target ref="id207"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>v_wr_75</name>
		<declaration>const double ts = T_veh;
const double sn = 75.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
 v_wr_75_signal = whlradius_74_signal-saturation_23_signal; 
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/v_wr 
  // Signal name: v_wr_75_signal; 
 // Predecessors (2): whlradius_74 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/whlRadius); saturation_23 (brake_acc_nodiv/Vehicle_Body_Wheels/Vehicle Model/Saturation); successors begin (1): times100_76 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/times100); </declaration>
		<location id="id209" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id210" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id211" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id211"/>
		<transition>
			<source ref="id209"/>
			<target ref="id209"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id210"/>
			<target ref="id209"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id211"/>
			<target ref="id210"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>times100_76</name>
		<declaration>const double ts = T_veh;
const double sn = 76.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 times100_76_signal = v_wr_75_signal * 100;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/times100 
  // Signal name: times100_76_signal; 
 // Predecessors (1): v_wr_75 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/v_wr); successors begin (2): sign_86 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/Sign); abs_77 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/Abs); </declaration>
		<location id="id212" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id213" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id214" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id214"/>
		<transition>
			<source ref="id212"/>
			<target ref="id212"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id213"/>
			<target ref="id212"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id214"/>
			<target ref="id213"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>abs_77</name>
		<declaration>const double ts = T_veh;
const double sn = 77.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 abs_77_signal = times100_76_signal;
 if(abs_77_signal &lt; 0){
 abs_77_signal = abs_77_signal * -1.0; 
}
 }

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/Abs 
  // Signal name: abs_77_signal; 
 // Predecessors (1): times100_76 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/times100); successors begin (2): _sfunction__0 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/slip_ratio_percentage/binary_search_ratio/ SFunction); divide_81 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/slip_ratio_percentage/Divide); </declaration>
		<location id="id215" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id216" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id217" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id217"/>
		<transition>
			<source ref="id215"/>
			<target ref="id215"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id216"/>
			<target ref="id215"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id217"/>
			<target ref="id216"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>max_v_wr_78</name>
		<declaration>const double ts = T_veh;
const double sn = 78.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
if(saturation_23_signal &gt;= saturation_23_signal&amp;&amp; saturation_23_signal &gt;= whlradius_74_signal){max_v_wr_78_signal = saturation_23_signal;}
if(whlradius_74_signal &gt;= saturation_23_signal&amp;&amp; whlradius_74_signal &gt;= whlradius_74_signal){max_v_wr_78_signal = whlradius_74_signal;}
;}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/max_v_wr 
  // Signal name: max_v_wr_78_signal; 
 // Predecessors (2): saturation_23 (brake_acc_nodiv/Vehicle_Body_Wheels/Vehicle Model/Saturation); whlradius_74 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/whlRadius); successors begin (3): divide_81 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/slip_ratio_percentage/Divide); switch_83 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/slip_ratio_percentage/Switch); _sfunction__0 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/slip_ratio_percentage/binary_search_ratio/ SFunction); </declaration>
		<location id="id218" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id219" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id220" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id220"/>
		<transition>
			<source ref="id218"/>
			<target ref="id218"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id219"/>
			<target ref="id218"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id220"/>
			<target ref="id219"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>binary_search_ratio_80</name>
		<declaration>double idx_min, idx_max, idx_mid;

const double ts = T_veh;
const double sn = 80.0;
const double OFFSET = 0.0;
clock t;

double abs_v_minus_wr; 
double max_v_wr; 

void blockRoutine(){}

void customInit(){}

void initialize(){
t = 0;
abs_v_minus_wr=abs_77_signal;
max_v_wr=max_v_wr_78_signal;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/slip_ratio_percentage/binary_search_ratio/ SFunction 
  // Signal name: _sfunction__80_signal; 
 // Predecessors (2): abs_77 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Abs); max_v_wr_78 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/max_v_wr); successors begin (2): _terminator__0 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/slip_ratio_percentage/binary_search_ratio/ Terminator); switch1_36 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/slip_ratio_percentage/Switch1); </declaration>
		<location id="id221" x="-816" y="-323">
			<committed/>
		</location>
		<location id="id222" x="-331" y="-323">
			<committed/>
		</location>
		<location id="id223" x="-153" y="-221">
			<name x="-229" y="-229">Discrete</name>
			<label kind="invariant" x="-221" y="-212">t &lt;= ts</label>
		</location>
		<location id="id224" x="-280" y="-637">
			<committed/>
		</location>
		<location id="id225" x="-323" y="-391">
			<committed/>
		</location>
		<location id="id226" x="-323" y="-459">
			<committed/>
		</location>
		<location id="id227" x="-816" y="-391">
			<committed/>
		</location>
		<location id="id228" x="-816" y="-459">
			<committed/>
		</location>
		<location id="id229" x="-561" y="-459">
			<committed/>
		</location>
		<location id="id230" x="-399" y="-722">
			<committed/>
		</location>
		<location id="id231" x="-399" y="-637">
			<committed/>
		</location>
		<location id="id232" x="-816" y="-637">
			<committed/>
		</location>
		<location id="id233" x="-816" y="-552">
			<committed/>
		</location>
		<location id="id234" x="-892" y="-501">
			<committed/>
		</location>
		<location id="id235" x="-816" y="-722">
			<committed/>
		</location>
		<location id="id236" x="-816" y="-816">
			<committed/>
		</location>
		<location id="id237" x="-280" y="-816">
			<committed/>
		</location>
		<location id="id238" x="-1003" y="-960">
			<name x="-1020" y="-994">Start</name>
			<label kind="invariant" x="-1079" y="-943">gtime &lt;= sn*IAT</label>
		</location>
		<location id="id239" x="-816" y="-960">
			<name x="-833" y="-994">Offset</name>
			<label kind="invariant" x="-799" y="-935">t &lt;= OFFSET</label>
		</location>
		<init ref="id238"/>
		<transition>
			<source ref="id239"/>
			<target ref="id236"/>
			<label kind="guard" x="-1095" y="-922">t &gt;= OFFSET</label>
		</transition>
		<transition>
			<source ref="id221"/>
			<target ref="id222"/>
			<label kind="guard" x="-799" y="-306">abs_v_minus_wr - idx_mid * max_v_wr &lt;= (idx_mid + 1.0)*max_v_wr - abs_v_minus_wr
/* if slip ratio is closer to idx_mid than idx_mid + 1 */</label>
		</transition>
		<transition>
			<source ref="id221"/>
			<target ref="id223"/>
			<label kind="guard" x="-1581" y="-382">abs_v_minus_wr - idx_mid * max_v_wr &gt; (idx_mid + 1.0)*max_v_wr - abs_v_minus_wr</label>
			<label kind="assignment" x="-1453" y="-663">binary_search_ratio_80_signal = idx_mid + 1.0,
t = 0, idx_min = 0.0, idx_max = 0.0, idx_mid = 0.0</label>
			<nail x="-816" y="-229"/>
		</transition>
		<transition>
			<source ref="id222"/>
			<target ref="id224"/>
			<label kind="assignment" x="-263" y="-578">binary_search_ratio_80_signal = idx_mid</label>
			<nail x="-280" y="-323"/>
			<nail x="-280" y="-518"/>
		</transition>
		<transition>
			<source ref="id224"/>
			<target ref="id223"/>
			<label kind="assignment" x="-246" y="-637">t = 0, idx_max = 0.0, idx_mid = 0.0, idx_min = 0.0</label>
			<nail x="-162" y="-637"/>
		</transition>
		<transition>
			<source ref="id225"/>
			<target ref="id226"/>
			<label kind="assignment" x="-314" y="-442">idx_min = idx_mid +1.0
/* choose upper part */</label>
		</transition>
		<transition>
			<source ref="id227"/>
			<target ref="id225"/>
			<label kind="guard" x="-688" y="-408">abs_v_minus_wr &gt; (idx_mid + 1.0)*max_v_wr
/* if slip ratio is larger than idx_mid + 1.0 */</label>
		</transition>
		<transition>
			<source ref="id228"/>
			<target ref="id227"/>
			<label kind="guard" x="-824" y="-433">abs_v_minus_wr &gt;= idx_mid * max_v_wr</label>
		</transition>
		<transition>
			<source ref="id229"/>
			<target ref="id226"/>
			<label kind="assignment" x="-518" y="-459">idx_max = idx_mid - 1.0
/* choose lower part */</label>
		</transition>
		<transition>
			<source ref="id230"/>
			<target ref="id231"/>
			<label kind="assignment" x="-510" y="-697">binary_search_ratio_80_signal = 100.0</label>
		</transition>
		<transition>
			<source ref="id231"/>
			<target ref="id224"/>
		</transition>
		<transition>
			<source ref="id232"/>
			<target ref="id231"/>
			<label kind="guard" x="-620" y="-654">idx_max &lt; idx_min</label>
			<label kind="assignment" x="-646" y="-629">binary_search_ratio_80_signal = 20.0
/* if idx_max &lt; idx_min, return 20%. 
   The case should never happen */</label>
		</transition>
		<transition>
			<source ref="id228"/>
			<target ref="id229"/>
			<label kind="guard" x="-790" y="-476">abs_v_minus_wr &lt; idx_mid * max_v_wr
/* if slip ratio is smaller than idx_mid */</label>
		</transition>
		<transition>
			<source ref="id226"/>
			<target ref="id232"/>
		</transition>
		<transition>
			<source ref="id227"/>
			<target ref="id221"/>
			<label kind="guard" x="-816" y="-365">abs_v_minus_wr &lt;= (idx_mid + 1.0)*max_v_wr</label>
		</transition>
		<transition>
			<source ref="id233"/>
			<target ref="id228"/>
			<label kind="assignment" x="-807" y="-527">idx_mid = (idx_min + idx_max)/2.0
/* the middle index */</label>
		</transition>
		<transition>
			<source ref="id232"/>
			<target ref="id233"/>
			<label kind="guard" x="-833" y="-595">idx_max &gt; idx_min</label>
		</transition>
		<transition>
			<source ref="id234"/>
			<target ref="id221"/>
			<label kind="assignment" x="-960" y="-399">idx_mid = idx_max</label>
		</transition>
		<transition>
			<source ref="id232"/>
			<target ref="id234"/>
			<label kind="guard" x="-1028" y="-629">idx_max == idx_min
/* decide if idx_min is idx_max
or idx_max + 1 */</label>
			<nail x="-824" y="-620"/>
		</transition>
		<transition>
			<source ref="id235"/>
			<target ref="id232"/>
			<label kind="guard" x="-884" y="-705">abs_v_minus_wr &lt; 100.0*max_v_wr</label>
			<label kind="assignment" x="-799" y="-697">idx_min = 0.0,
idx_max = 99.0 /* start binary search */</label>
		</transition>
		<transition>
			<source ref="id236"/>
			<target ref="id235"/>
			<label kind="guard" x="-943" y="-790">abs_v_minus_wr &lt; 0.0 || max_v_wr &lt; 0.0 || 
abs_v_minus_wr &gt; 0.0 || max_v_wr &gt; 0.0</label>
		</transition>
		<transition>
			<source ref="id235"/>
			<target ref="id230"/>
			<label kind="guard" x="-773" y="-748">abs_v_minus_wr &gt;= 100.0*max_v_wr</label>
		</transition>
		<transition>
			<source ref="id237"/>
			<target ref="id224"/>
			<label kind="assignment" x="-382" y="-782">binary_search_ratio_80_signal = 0.0</label>
		</transition>
		<transition>
			<source ref="id236"/>
			<target ref="id237"/>
			<label kind="guard" x="-620" y="-841">abs_v_minus_wr == 0.0 || max_v_wr == 0.0</label>
		</transition>
		<transition>
			<source ref="id223"/>
			<target ref="id236"/>
			<label kind="guard" x="-484" y="-909">t &gt;= ts</label>
			<label kind="assignment" x="-493" y="-875">initialize()</label>
			<nail x="-93" y="-289"/>
			<nail x="-93" y="-884"/>
			<nail x="-782" y="-884"/>
			<nail x="-799" y="-850"/>
		</transition>
		<transition>
			<source ref="id238"/>
			<target ref="id239"/>
			<label kind="guard" x="-969" y="-986">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-935" y="-952">initialize()</label>
		</transition>
	</template>
	<template>
		<name>divide_81</name>
		<declaration>const double ts = T_veh;
const double sn = 81.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){divide_81_signal = abs_77_signal * max_v_wr_78_signal;}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/slip_ratio_percentage/Divide 
  // Signal name: divide_81_signal; 
 // Predecessors (2): abs_77 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/Abs); max_v_wr_78 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/max_v_wr); successors begin (1): switch_83 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/slip_ratio_percentage/Switch); </declaration>
		<location id="id240" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id241" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id242" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id242"/>
		<transition>
			<source ref="id240"/>
			<target ref="id240"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id241"/>
			<target ref="id240"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id242"/>
			<target ref="id241"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>switch_83</name>
		<declaration>const double ts = T_veh;
const double sn = 83.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
if(max_v_wr_78_signal &gt; 0) {
switch_83_signal = divide_81_signal;
} else {
switch_83_signal = c_zero_82_signal;
}
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/slip_ratio_percentage/Switch 
  // Signal name: switch_83_signal; 
 // Predecessors (3): divide_81 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/slip_ratio_percentage/Divide); max_v_wr_78 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/max_v_wr); c_zero_82 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/slip_ratio_percentage/C_zero); successors begin (1): switch1_84 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/slip_ratio_percentage/Switch1); </declaration>
		<location id="id243" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id244" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id245" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id245"/>
		<transition>
			<source ref="id243"/>
			<target ref="id243"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id244"/>
			<target ref="id243"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id245"/>
			<target ref="id244"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>switch1_84</name>
		<declaration>const double ts = T_veh;
const double sn = 84.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
if(c_use_div_79_signal &gt; 0) {
switch1_84_signal = switch_83_signal;
} else {
switch1_84_signal = binary_search_ratio_80_signal;
}
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/slip_ratio_percentage/Switch1 
  // Signal name: switch1_84_signal; 
 // Predecessors (3): switch_83 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/slip_ratio_percentage/Switch); c_use_div_79 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/slip_ratio_percentage/C_use_div); _sfunction__0 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/slip_ratio_percentage/binary_search_ratio/ SFunction); successors begin (1): friction_force_n_85 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/friction_force_N); </declaration>
		<location id="id246" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id247" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id248" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id248"/>
		<transition>
			<source ref="id246"/>
			<target ref="id246"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id247"/>
			<target ref="id246"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id248"/>
			<target ref="id247"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>friction_force_n_85</name>
		<declaration>const double ts = T_veh;
const double sn = 85.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
if (switch1_84_signal&lt;0){friction_force_n_85_signal=0;}
if (switch1_84_signal&gt;=0 &amp;&amp; switch1_84_signal&lt;20.0) {friction_force_n_85_signal=switch1_84_signal*73.5;}
if (switch1_84_signal&gt;=20.0 &amp;&amp; switch1_84_signal&lt;30.0) {friction_force_n_85_signal=2450-49*switch1_84_signal;}
if (switch1_84_signal&gt;30.0){friction_force_n_85_signal=980;}
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/friction_force_N 
  // Signal name: friction_force_n_85_signal; 
 // Predecessors (1): switch1_84 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/slip_ratio_percentage/Switch1); successors begin (1): product_87 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/Product); </declaration>
		<location id="id249" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id250" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id251" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id251"/>
		<transition>
			<source ref="id249"/>
			<target ref="id249"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id250"/>
			<target ref="id249"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id251"/>
			<target ref="id250"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>sign_86</name>
		<declaration>const double ts = T_veh;
const double sn = 86.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
if(times100_76_signal &lt; 0.0){sign_86_signal = -1.0;}
if(times100_76_signal == 0.0){sign_86_signal = 0.0;}
if(times100_76_signal &gt; 0.0){sign_86_signal = 1.0;}}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/Sign 
  // Signal name: sign_86_signal; 
 // Predecessors (1): times100_76 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/times100); successors begin (1): product_87 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/Product); </declaration>
		<location id="id252" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id253" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id254" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id254"/>
		<transition>
			<source ref="id252"/>
			<target ref="id252"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id253"/>
			<target ref="id252"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id254"/>
			<target ref="id253"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>product_87</name>
		<declaration>const double ts = T_veh;
const double sn = 87.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
product_87_signal = friction_force_n_85_signal * sign_86_signal;}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/Product 
  // Signal name: product_87_signal; 
 // Predecessors (2): friction_force_n_85 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/friction_force_N); sign_86 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/Sign); successors begin (2): radius_88 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/Radius); add_19 (brake_acc_nodiv/Vehicle_Body_Wheels/Vehicle Model/Add); </declaration>
		<location id="id255" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id256" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id257" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id257"/>
		<transition>
			<source ref="id255"/>
			<target ref="id255"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id256"/>
			<target ref="id255"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id257"/>
			<target ref="id256"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>radius_88</name>
		<declaration>const double ts = T_veh;
const double sn = 88.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 radius_88_signal = product_87_signal * R;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/Radius 
  // Signal name: radius_88_signal; 
 // Predecessors (1): product_87 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/Product); successors begin (1): subtract_89 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/Subtract); </declaration>
		<location id="id258" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id259" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id260" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id260"/>
		<transition>
			<source ref="id258"/>
			<target ref="id258"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id259"/>
			<target ref="id258"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id260"/>
			<target ref="id259"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>subtract_89</name>
		<declaration>const double ts = T_veh;
const double sn = 89.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
 subtract_89_signal = fr_71_signal-radius_88_signal; 
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/Subtract 
  // Signal name: subtract_89_signal; 
 // Predecessors (2): fr_71 (brake_acc_nodiv/Vehicle_Body_Wheels/FR); radius_88 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/Radius); successors begin (1): ts_over_inertia_91 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/Ts_over_Inertia); </declaration>
		<location id="id261" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id262" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id263" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id263"/>
		<transition>
			<source ref="id261"/>
			<target ref="id261"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id262"/>
			<target ref="id261"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id263"/>
			<target ref="id262"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>ts_over_inertia_91</name>
		<declaration>const double ts = T_veh;
const double sn = 91.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 ts_over_inertia_91_signal = subtract_89_signal * T_veh/I;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/Ts_over_Inertia 
  // Signal name: ts_over_inertia_91_signal; 
 // Predecessors (1): subtract_89 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/Subtract); successors begin (1): sum_92 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/Sum); </declaration>
		<location id="id264" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id265" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id266" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id266"/>
		<transition>
			<source ref="id264"/>
			<target ref="id264"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id265"/>
			<target ref="id264"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id266"/>
			<target ref="id265"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>sum_92</name>
		<declaration>const double ts = T_veh;
const double sn = 92.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
 sum_92_signal = ts_over_inertia_91_signal+saturation_73_signal; 
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/Sum 
  // Signal name: sum_92_signal; 
 // Predecessors (2): ts_over_inertia_91 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/Ts_over_Inertia); saturation_73 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/Saturation); successors begin (1): w_radps_72 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/w_radps); </declaration>
		<location id="id267" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id268" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id269" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id269"/>
		<transition>
			<source ref="id267"/>
			<target ref="id267"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id268"/>
			<target ref="id267"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id269"/>
			<target ref="id268"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>w__rpm__93</name>
		<declaration>const double ts = T_veh;
const double sn = 93.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 w__rpm__93_signal = saturation_73_signal * 30/pi;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/w (rpm) 
  // Signal name: w__rpm__93_signal; 
 // Predecessors (1): saturation_73 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/Saturation); successors begin (1): to_int_119 (brake_acc_nodiv/HW_FREncoder/to_int); </declaration>
		<location id="id270" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id271" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id272" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id272"/>
		<transition>
			<source ref="id270"/>
			<target ref="id270"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id271"/>
			<target ref="id270"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id272"/>
			<target ref="id271"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>negative1_94</name>
		<declaration>const double ts = T_veh;
const double sn = 94.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 negative1_94_signal = threshold_10km_h_180_signal * -1;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/negative1 
  // Signal name: negative1_94_signal; 
 // Predecessors (1): threshold_10km_h_180 (brake_acc_nodiv/ABS_RL_Wheel/Threshold_10km//h); successors begin (1): rl_95 (brake_acc_nodiv/Vehicle_Body_Wheels/RL); </declaration>
		<location id="id273" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id274" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id275" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id275"/>
		<transition>
			<source ref="id273"/>
			<target ref="id273"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id274"/>
			<target ref="id273"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id275"/>
			<target ref="id274"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>rl_95</name>
		<declaration>const double ts = T_veh;
const double sn = 95.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
if(threshold_10km_h_180_signal &gt; 0) {rl_95_signal = negative1_94_signal;} 
else {rl_95_signal = half_16_signal;}
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RL 
  // Signal name: rl_95_signal; 
 // Predecessors (3): negative1_94 (brake_acc_nodiv/Vehicle_Body_Wheels/negative1); threshold_10km_h_180 (brake_acc_nodiv/ABS_RL_Wheel/Threshold_10km//h); half_16 (brake_acc_nodiv/Vehicle_Body_Wheels/half); successors begin (1): subtract_113 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/Subtract); </declaration>
		<location id="id276" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id277" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id278" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id278"/>
		<transition>
			<source ref="id276"/>
			<target ref="id276"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id277"/>
			<target ref="id276"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id278"/>
			<target ref="id277"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>w_radps_96</name>
		<declaration>const double ts = T_veh;
const double sn = 96.0;
const double OFFSET = 0.0;
clock t;

double in_prev;

void blockRoutine()
{
w_radps_96_signal = in_prev;
in_prev=sum_116_signal;
}


void customInit(){in_prev=0.0;}


void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/w_radps 
  // Signal name: w_radps_96_signal; 
 // Predecessors (1): sum_116 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/Sum); successors begin (1): saturation_97 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/Saturation); </declaration>
		<location id="id279" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id280" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id281" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id281"/>
		<transition>
			<source ref="id279"/>
			<target ref="id279"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id280"/>
			<target ref="id279"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id281"/>
			<target ref="id280"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>saturation_97</name>
		<declaration>const double ts = T_veh;
const double sn = 97.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){ 
if(w_radps_96_signal &gt;= w_max) {saturation_97_signal = w_max;}
if(w_radps_96_signal &lt;= 0.0) { saturation_97_signal = 0.0;}
if(w_radps_96_signal&lt;w_max &amp;&amp; w_radps_96_signal&gt;0){saturation_97_signal=w_radps_96_signal;}
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/Saturation 
  // Signal name: saturation_97_signal; 
 // Predecessors (1): w_radps_96 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/w_radps); successors begin (3): sum_116 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/Sum); whlradius_98 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/whlRadius); w__rpm__117 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/w (rpm)); </declaration>
		<location id="id282" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id283" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id284" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id284"/>
		<transition>
			<source ref="id282"/>
			<target ref="id282"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id283"/>
			<target ref="id282"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id284"/>
			<target ref="id283"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>whlradius_98</name>
		<declaration>const double ts = T_veh;
const double sn = 98.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 whlradius_98_signal = saturation_97_signal * R;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/whlRadius 
  // Signal name: whlradius_98_signal; 
 // Predecessors (1): saturation_97 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/Saturation); successors begin (2): max_v_wr_102 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/max_v_wr); v_wr_99 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/v_wr); </declaration>
		<location id="id285" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id286" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id287" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id287"/>
		<transition>
			<source ref="id285"/>
			<target ref="id285"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id286"/>
			<target ref="id285"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id287"/>
			<target ref="id286"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>v_wr_99</name>
		<declaration>const double ts = T_veh;
const double sn = 99.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
 v_wr_99_signal = whlradius_98_signal-saturation_23_signal; 
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/v_wr 
  // Signal name: v_wr_99_signal; 
 // Predecessors (2): whlradius_98 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/whlRadius); saturation_23 (brake_acc_nodiv/Vehicle_Body_Wheels/Vehicle Model/Saturation); successors begin (1): times100_100 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/times100); </declaration>
		<location id="id288" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id289" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id290" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id290"/>
		<transition>
			<source ref="id288"/>
			<target ref="id288"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id289"/>
			<target ref="id288"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id290"/>
			<target ref="id289"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>times100_100</name>
		<declaration>const double ts = T_veh;
const double sn = 100.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 times100_100_signal = v_wr_99_signal * 100;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/times100 
  // Signal name: times100_100_signal; 
 // Predecessors (1): v_wr_99 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/v_wr); successors begin (2): abs_101 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/Abs); sign_110 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/Sign); </declaration>
		<location id="id291" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id292" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id293" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id293"/>
		<transition>
			<source ref="id291"/>
			<target ref="id291"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id292"/>
			<target ref="id291"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id293"/>
			<target ref="id292"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>abs_101</name>
		<declaration>const double ts = T_veh;
const double sn = 101.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 abs_101_signal = times100_100_signal;
 if(abs_101_signal &lt; 0){
 abs_101_signal = abs_101_signal * -1.0; 
}
 }

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/Abs 
  // Signal name: abs_101_signal; 
 // Predecessors (1): times100_100 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/times100); successors begin (2): _sfunction__0 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/slip_ratio_percentage/binary_search_ratio/ SFunction); divide_105 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/slip_ratio_percentage/Divide); </declaration>
		<location id="id294" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id295" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id296" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id296"/>
		<transition>
			<source ref="id294"/>
			<target ref="id294"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id295"/>
			<target ref="id294"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id296"/>
			<target ref="id295"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>max_v_wr_102</name>
		<declaration>const double ts = T_veh;const 
double sn = 102.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
if(saturation_23_signal &gt;= saturation_23_signal&amp;&amp; saturation_23_signal &gt;= whlradius_98_signal){max_v_wr_102_signal = saturation_23_signal;}
if(whlradius_98_signal &gt;= saturation_23_signal&amp;&amp; whlradius_98_signal &gt;= whlradius_98_signal){max_v_wr_102_signal = whlradius_98_signal;}
;}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/max_v_wr 
  // Signal name: max_v_wr_102_signal; 
 // Predecessors (2): saturation_23 (brake_acc_nodiv/Vehicle_Body_Wheels/Vehicle Model/Saturation); whlradius_98 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/whlRadius); successors begin (3): _sfunction__0 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/slip_ratio_percentage/binary_search_ratio/ SFunction); divide_105 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/slip_ratio_percentage/Divide); switch_107 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/slip_ratio_percentage/Switch); </declaration>
		<location id="id297" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id298" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id299" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id299"/>
		<transition>
			<source ref="id297"/>
			<target ref="id297"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id298"/>
			<target ref="id297"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id299"/>
			<target ref="id298"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>binary_search_ratio_104</name>
		<declaration>double idx_min, idx_max, idx_mid;

const double ts = T_veh;
const double sn = 104.0;
const double OFFSET = 0.0;
clock t;

double abs_v_minus_wr; 
double max_v_wr; 

void blockRoutine(){}

void customInit(){}

void initialize(){
t = 0;
abs_v_minus_wr=abs_101_signal;
max_v_wr=max_v_wr_102_signal;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/slip_ratio_percentage/binary_search_ratio/ SFunction 
  // Signal name: _sfunction__104_signal; 
 // Predecessors (2): abs_101 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/Abs); max_v_wr_102 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/max_v_wr); successors begin (2): _terminator__0 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/slip_ratio_percentage/binary_search_ratio/ Terminator); switch1_36 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/slip_ratio_percentage/Switch1); </declaration>
		<location id="id300" x="-816" y="-323">
			<committed/>
		</location>
		<location id="id301" x="-331" y="-323">
			<committed/>
		</location>
		<location id="id302" x="-153" y="-221">
			<name x="-229" y="-229">Discrete</name>
			<label kind="invariant" x="-221" y="-212">t &lt;= ts</label>
		</location>
		<location id="id303" x="-280" y="-637">
			<committed/>
		</location>
		<location id="id304" x="-323" y="-391">
			<committed/>
		</location>
		<location id="id305" x="-323" y="-459">
			<committed/>
		</location>
		<location id="id306" x="-816" y="-391">
			<committed/>
		</location>
		<location id="id307" x="-816" y="-459">
			<committed/>
		</location>
		<location id="id308" x="-561" y="-459">
			<committed/>
		</location>
		<location id="id309" x="-399" y="-722">
			<committed/>
		</location>
		<location id="id310" x="-399" y="-637">
			<committed/>
		</location>
		<location id="id311" x="-816" y="-637">
			<committed/>
		</location>
		<location id="id312" x="-816" y="-552">
			<committed/>
		</location>
		<location id="id313" x="-892" y="-501">
			<committed/>
		</location>
		<location id="id314" x="-816" y="-722">
			<committed/>
		</location>
		<location id="id315" x="-816" y="-816">
			<committed/>
		</location>
		<location id="id316" x="-280" y="-816">
			<committed/>
		</location>
		<location id="id317" x="-1003" y="-960">
			<name x="-1020" y="-994">Start</name>
			<label kind="invariant" x="-1079" y="-943">gtime &lt;= sn*IAT</label>
		</location>
		<location id="id318" x="-816" y="-960">
			<name x="-833" y="-994">Offset</name>
			<label kind="invariant" x="-799" y="-935">t &lt;= OFFSET</label>
		</location>
		<init ref="id317"/>
		<transition>
			<source ref="id318"/>
			<target ref="id315"/>
			<label kind="guard" x="-1095" y="-922">t &gt;= OFFSET</label>
		</transition>
		<transition>
			<source ref="id300"/>
			<target ref="id301"/>
			<label kind="guard" x="-799" y="-306">abs_v_minus_wr - idx_mid * max_v_wr &lt;= (idx_mid + 1.0)*max_v_wr - abs_v_minus_wr
/* if slip ratio is closer to idx_mid than idx_mid + 1 */</label>
		</transition>
		<transition>
			<source ref="id300"/>
			<target ref="id302"/>
			<label kind="guard" x="-1581" y="-382">abs_v_minus_wr - idx_mid * max_v_wr &gt; (idx_mid + 1.0)*max_v_wr - abs_v_minus_wr</label>
			<label kind="assignment" x="-1453" y="-663">binary_search_ratio_104_signal = idx_mid + 1.0,
t = 0, idx_min = 0.0, idx_max = 0.0, idx_mid = 0.0</label>
			<nail x="-816" y="-229"/>
		</transition>
		<transition>
			<source ref="id301"/>
			<target ref="id303"/>
			<label kind="assignment" x="-263" y="-578">binary_search_ratio_104_signal = idx_mid</label>
			<nail x="-280" y="-323"/>
			<nail x="-280" y="-518"/>
		</transition>
		<transition>
			<source ref="id303"/>
			<target ref="id302"/>
			<label kind="assignment" x="-246" y="-637">t = 0, idx_max = 0.0, idx_mid = 0.0, idx_min = 0.0</label>
			<nail x="-162" y="-637"/>
		</transition>
		<transition>
			<source ref="id304"/>
			<target ref="id305"/>
			<label kind="assignment" x="-314" y="-442">idx_min = idx_mid +1.0
/* choose upper part */</label>
		</transition>
		<transition>
			<source ref="id306"/>
			<target ref="id304"/>
			<label kind="guard" x="-688" y="-391">abs_v_minus_wr &gt; (idx_mid + 1.0)*max_v_wr
/* if slip ratio is larger than idx_mid + 1.0 */</label>
		</transition>
		<transition>
			<source ref="id307"/>
			<target ref="id306"/>
			<label kind="guard" x="-833" y="-433">abs_v_minus_wr &gt;= idx_mid * max_v_wr</label>
		</transition>
		<transition>
			<source ref="id308"/>
			<target ref="id305"/>
			<label kind="assignment" x="-518" y="-459">idx_max = idx_mid - 1.0
/* choose lower part */</label>
		</transition>
		<transition>
			<source ref="id309"/>
			<target ref="id310"/>
			<label kind="assignment" x="-510" y="-697">binary_search_ratio_104_signal = 100.0</label>
		</transition>
		<transition>
			<source ref="id310"/>
			<target ref="id303"/>
		</transition>
		<transition>
			<source ref="id311"/>
			<target ref="id310"/>
			<label kind="guard" x="-612" y="-663">idx_max &lt; idx_min</label>
			<label kind="assignment" x="-646" y="-629">binary_search_ratio_104_signal = 20.0
/* if idx_max &lt; idx_min, return 20%. 
   The case should never happen */</label>
		</transition>
		<transition>
			<source ref="id307"/>
			<target ref="id308"/>
			<label kind="guard" x="-790" y="-476">abs_v_minus_wr &lt; idx_mid * max_v_wr
/* if slip ratio is smaller than idx_mid */</label>
		</transition>
		<transition>
			<source ref="id305"/>
			<target ref="id311"/>
		</transition>
		<transition>
			<source ref="id306"/>
			<target ref="id300"/>
			<label kind="guard" x="-799" y="-348">abs_v_minus_wr &lt;= (idx_mid + 1.0)*max_v_wr</label>
		</transition>
		<transition>
			<source ref="id312"/>
			<target ref="id307"/>
			<label kind="assignment" x="-807" y="-527">idx_mid = (idx_min + idx_max)/2.0
/* the middle index */</label>
		</transition>
		<transition>
			<source ref="id311"/>
			<target ref="id312"/>
			<label kind="guard" x="-833" y="-595">idx_max &gt; idx_min</label>
		</transition>
		<transition>
			<source ref="id313"/>
			<target ref="id300"/>
			<label kind="assignment" x="-960" y="-399">idx_mid = idx_max</label>
		</transition>
		<transition>
			<source ref="id311"/>
			<target ref="id313"/>
			<label kind="guard" x="-1028" y="-629">idx_max == idx_min
/* decide if idx_min is idx_max
or idx_max + 1 */</label>
			<nail x="-824" y="-620"/>
		</transition>
		<transition>
			<source ref="id314"/>
			<target ref="id311"/>
			<label kind="guard" x="-892" y="-714">abs_v_minus_wr &lt;100.0*max_v_wr</label>
			<label kind="assignment" x="-799" y="-697">idx_min = 0.0,
idx_max = 99.0 /* start binary search */</label>
		</transition>
		<transition>
			<source ref="id315"/>
			<target ref="id314"/>
			<label kind="guard" x="-909" y="-799">abs_v_minus_wr &lt; 0.0 || max_v_wr &lt; 0.0 ||
abs_v_minus_wr &gt; 0.0 || max_v_wr &gt; 0.0</label>
		</transition>
		<transition>
			<source ref="id314"/>
			<target ref="id309"/>
			<label kind="guard" x="-773" y="-748">abs_v_minus_wr &gt;= 100.0*max_v_wr</label>
		</transition>
		<transition>
			<source ref="id316"/>
			<target ref="id303"/>
			<label kind="assignment" x="-382" y="-782">binary_search_ratio_104_signal = 0.0</label>
		</transition>
		<transition>
			<source ref="id315"/>
			<target ref="id316"/>
			<label kind="guard" x="-620" y="-841">abs_v_minus_wr == 0.0 || max_v_wr == 0.0</label>
		</transition>
		<transition>
			<source ref="id302"/>
			<target ref="id315"/>
			<label kind="guard" x="-484" y="-909">t &gt;= ts</label>
			<label kind="assignment" x="-493" y="-875">initialize()</label>
			<nail x="-93" y="-289"/>
			<nail x="-93" y="-884"/>
			<nail x="-782" y="-884"/>
			<nail x="-799" y="-850"/>
		</transition>
		<transition>
			<source ref="id317"/>
			<target ref="id318"/>
			<label kind="guard" x="-969" y="-986">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-935" y="-952">initialize()</label>
		</transition>
	</template>
	<template>
		<name>divide_105</name>
		<declaration>const double ts = T_veh;
const 
double sn = 105.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){divide_105_signal = abs_101_signal * max_v_wr_102_signal;}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/slip_ratio_percentage/Divide 
  // Signal name: divide_105_signal; 
 // Predecessors (2): abs_101 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/Abs); max_v_wr_102 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/max_v_wr); successors begin (1): switch_107 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/slip_ratio_percentage/Switch); </declaration>
		<location id="id319" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id320" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id321" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id321"/>
		<transition>
			<source ref="id319"/>
			<target ref="id319"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id320"/>
			<target ref="id319"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id321"/>
			<target ref="id320"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>switch_107</name>
		<declaration>const double ts = T_veh;
const double sn = 107.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
if(max_v_wr_102_signal &gt; 0) {
switch_107_signal = divide_105_signal;
} else {
switch_107_signal = c_zero_106_signal;
}
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/slip_ratio_percentage/Switch 
  // Signal name: switch_107_signal; 
 // Predecessors (3): divide_105 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/slip_ratio_percentage/Divide); max_v_wr_102 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/max_v_wr); c_zero_106 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/slip_ratio_percentage/C_zero); successors begin (1): switch1_108 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/slip_ratio_percentage/Switch1); </declaration>
		<location id="id322" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id323" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id324" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id324"/>
		<transition>
			<source ref="id322"/>
			<target ref="id322"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id323"/>
			<target ref="id322"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id324"/>
			<target ref="id323"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>switch1_108</name>
		<declaration>const double ts = T_veh;const 
double sn = 108.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
if(c_use_div_103_signal &gt; 0) {
switch1_108_signal = switch_107_signal;
} else {
switch1_108_signal = binary_search_ratio_104_signal;
}
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/slip_ratio_percentage/Switch1 
  // Signal name: switch1_108_signal; 
 // Predecessors (3): switch_107 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/slip_ratio_percentage/Switch); c_use_div_103 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/slip_ratio_percentage/C_use_div); _sfunction__0 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/slip_ratio_percentage/binary_search_ratio/ SFunction); successors begin (1): friction_force_n_109 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/friction_force_N); </declaration>
		<location id="id325" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id326" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id327" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id327"/>
		<transition>
			<source ref="id325"/>
			<target ref="id325"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id326"/>
			<target ref="id325"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id327"/>
			<target ref="id326"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>friction_force_n_109</name>
		<declaration>const double ts = T_veh;
const 
double sn = 109.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
if (switch1_108_signal&lt;0){friction_force_n_109_signal=0;}
if (switch1_108_signal&gt;=0 &amp;&amp; switch1_108_signal&lt;20.0) {friction_force_n_109_signal=switch1_108_signal*73.5;}
if (switch1_108_signal&gt;=20.0 &amp;&amp; switch1_108_signal&lt;30.0) {friction_force_n_109_signal=2450-49*switch1_108_signal;}
if (switch1_108_signal&gt;30.0){friction_force_n_109_signal=980;}
}



void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/friction_force_N 
  // Signal name: friction_force_n_109_signal; 
 // Predecessors (1): switch1_108 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/slip_ratio_percentage/Switch1); successors begin (1): product_111 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/Product); </declaration>
		<location id="id328" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id329" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id330" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id330"/>
		<transition>
			<source ref="id328"/>
			<target ref="id328"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id329"/>
			<target ref="id328"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id330"/>
			<target ref="id329"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>sign_110</name>
		<declaration>const double ts = T_veh;
const double sn = 110.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
if(times100_100_signal &lt; 0.0){sign_110_signal = -1.0;}
if(times100_100_signal == 0.0){sign_110_signal = 0.0;}
if(times100_100_signal &gt; 0.0){sign_110_signal = 1.0;}}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/Sign 
  // Signal name: sign_110_signal; 
 // Predecessors (1): times100_100 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/times100); successors begin (1): product_111 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/Product); </declaration>
		<location id="id331" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id332" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id333" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id333"/>
		<transition>
			<source ref="id331"/>
			<target ref="id331"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id332"/>
			<target ref="id331"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id333"/>
			<target ref="id332"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>product_111</name>
		<declaration>const double ts = T_veh;
const double sn = 111.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
product_111_signal = friction_force_n_109_signal * sign_110_signal;}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/Product 
  // Signal name: product_111_signal; 
 // Predecessors (2): friction_force_n_109 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/friction_force_N); sign_110 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/Sign); successors begin (2): radius_112 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/Radius); add_19 (brake_acc_nodiv/Vehicle_Body_Wheels/Vehicle Model/Add); </declaration>
		<location id="id334" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id335" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id336" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id336"/>
		<transition>
			<source ref="id334"/>
			<target ref="id334"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id335"/>
			<target ref="id334"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id336"/>
			<target ref="id335"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>radius_112</name>
		<declaration>const double ts = T_veh;
const double sn = 112.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 radius_112_signal = product_111_signal * R;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/Radius 
  // Signal name: radius_112_signal; 
 // Predecessors (1): product_111 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/Product); successors begin (1): subtract_113 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/Subtract); </declaration>
		<location id="id337" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id338" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id339" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id339"/>
		<transition>
			<source ref="id337"/>
			<target ref="id337"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id338"/>
			<target ref="id337"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id339"/>
			<target ref="id338"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>subtract_113</name>
		<declaration>const double ts = T_veh;
const double sn = 113.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
 subtract_113_signal = rl_95_signal-radius_112_signal; 
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/Subtract 
  // Signal name: subtract_113_signal; 
 // Predecessors (2): rl_95 (brake_acc_nodiv/Vehicle_Body_Wheels/RL); radius_112 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/Radius); successors begin (1): ts_over_inertia_115 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/Ts_over_Inertia); </declaration>
		<location id="id340" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id341" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id342" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id342"/>
		<transition>
			<source ref="id340"/>
			<target ref="id340"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id341"/>
			<target ref="id340"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id342"/>
			<target ref="id341"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>ts_over_inertia_115</name>
		<declaration>const double ts = T_veh;
const double sn = 115.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 ts_over_inertia_115_signal = subtract_113_signal * T_veh/I;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/Ts_over_Inertia 
  // Signal name: ts_over_inertia_115_signal; 
 // Predecessors (1): subtract_113 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/Subtract); successors begin (1): sum_116 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/Sum); </declaration>
		<location id="id343" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id344" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id345" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id345"/>
		<transition>
			<source ref="id343"/>
			<target ref="id343"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id344"/>
			<target ref="id343"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id345"/>
			<target ref="id344"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>sum_116</name>
		<declaration>const double ts = T_veh;
const double sn = 116.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
 sum_116_signal = ts_over_inertia_115_signal+saturation_97_signal; 
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/Sum 
  // Signal name: sum_116_signal; 
 // Predecessors (2): ts_over_inertia_115 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/Ts_over_Inertia); saturation_97 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/Saturation); successors begin (1): w_radps_96 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/w_radps); </declaration>
		<location id="id346" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id347" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id348" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id348"/>
		<transition>
			<source ref="id346"/>
			<target ref="id346"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id347"/>
			<target ref="id346"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id348"/>
			<target ref="id347"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>w__rpm__117</name>
		<declaration>const double ts = T_veh;
const double sn = 117.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 w__rpm__117_signal = saturation_97_signal * 30/pi;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/w (rpm) 
  // Signal name: w__rpm__117_signal; 
 // Predecessors (1): saturation_97 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/Saturation); successors begin (1): to_int_167 (brake_acc_nodiv/HW_RLEncoder/to_int); </declaration>
		<location id="id349" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id350" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id351" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id351"/>
		<transition>
			<source ref="id349"/>
			<target ref="id349"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id350"/>
			<target ref="id349"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id351"/>
			<target ref="id350"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>v__km_h__118</name>
		<declaration>const double ts = T_veh;
const double sn = 118.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 v__km_h__118_signal = saturation_23_signal * 3.6;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Vehicle_Body_Wheels/v (km//h) 
  // Signal name: v__km_h__118_signal; 
 // Predecessors (1): saturation_23 (brake_acc_nodiv/Vehicle_Body_Wheels/Vehicle Model/Saturation); successors begin (0): </declaration>
		<location id="id352" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id353" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id354" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id354"/>
		<transition>
			<source ref="id352"/>
			<target ref="id352"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id353"/>
			<target ref="id352"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id354"/>
			<target ref="id353"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">to_int_119</name>
		<declaration>clock t;
const double sn = 119.0;

 bool rounding = true;
double i, in_prev;
/* Rounding */            void blockRoutine()
            {
            while(rounding)
            {
                i = i + 1.0;
                if (i &gt; w__rpm__93_signal)
                {
                    if(2 == 0)//floor
                        whespd__m_s__122_signal = i-1.0;
                    else if(2 == 1)//ceiling
                        whespd__m_s__122_signal = i;
                    else if(2 == 2)//round
                    {
                        if(i - w__rpm__93_signal &gt; 0.5)//floor
                            to_int_119_signal = i-1.0;
                        else//ceiling
                            to_int_119_signal = i;
                    }
                    rounding = false;
                }
            }rounding = true;i = 0.0;
            }
        

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/HW_FREncoder/to_int 
  // Signal name: to_int_119_signal; 
 // Predecessors (1): w__rpm__93 (brake_acc_nodiv/Vehicle_Body_Wheels/FR_Wheel/w (rpm)); successors begin (3): whespd__m_s__122 (brake_acc_nodiv/ABS_FR_Wheel/If v&gt;=10 km//h/wheSpd (m//s)); add_201 (brake_acc_nodiv/Veh_Speed_Estimator/Add); terminator2_0 (brake_acc_nodiv/Global Brake Controller/Terminator2); </declaration>
		<location id="id355" x="93" y="-17">
			<name x="110" y="-25">Operate</name>
			<label kind="exponentialrate" x="110" y="0">1000</label>
		</location>
		<location id="id356" x="-144" y="-17">
			<name x="-169" y="-51">Start</name>
			<label kind="invariant" x="-186" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id356"/>
		<transition>
			<source ref="id356"/>
			<target ref="id355"/>
			<label kind="guard" x="-68" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-59" y="-17">initialize(), blockRoutine()</label>
		</transition>
		<transition>
			<source ref="id355"/>
			<target ref="id355"/>
			<label kind="assignment" x="93" y="-93">blockRoutine()</label>
			<nail x="93" y="-76"/>
			<nail x="187" y="-76"/>
			<nail x="187" y="51"/>
			<nail x="93" y="51"/>
		</transition>
	</template>
	<template>
		<name>whespd__m_s__122</name>
		<declaration>const double ts = T_abs;
const 
double sn = 122.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 whespd__m_s__122_signal = to_int_119_signal * R*pi/30;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_FR_Wheel/If v&gt;=10 km//h/wheSpd (m//s) 
  // Signal name: whespd__m_s__122_signal; 
 // Predecessors (1): to_int_119 (brake_acc_nodiv/HW_FREncoder/to_int); successors begin (1): subtract_124 (brake_acc_nodiv/ABS_FR_Wheel/If v&gt;=10 km//h/Subtract); </declaration>
		<location id="id357" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id358" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id359" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id359"/>
		<transition>
			<source ref="id357"/>
			<target ref="id357"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id358"/>
			<target ref="id357"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id359"/>
			<target ref="id358"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>v__m_s__123</name>
		<declaration>const double ts = T_abs;
const double sn = 123.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 v__m_s__123_signal = v__km_h__204_signal * 10/36;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_FR_Wheel/If v&gt;=10 km//h/v (m//s) 
  // Signal name: v__m_s__123_signal; 
 // Predecessors (1): v__km_h__204 (brake_acc_nodiv/Veh_Speed_Estimator/v (km//h)); successors begin (2): subtract_124 (brake_acc_nodiv/ABS_FR_Wheel/If v&gt;=10 km//h/Subtract); slip_abs_on_times_10_127 (brake_acc_nodiv/ABS_FR_Wheel/If v&gt;=10 km//h/slip_abs_on_times_10); </declaration>
		<location id="id360" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id361" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id362" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id362"/>
		<transition>
			<source ref="id360"/>
			<target ref="id360"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id361"/>
			<target ref="id360"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id362"/>
			<target ref="id361"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>subtract_124</name>
		<declaration>const double ts = T_abs;
const double sn = 124.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
 subtract_124_signal = -whespd__m_s__122_signal+v__m_s__123_signal; 
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_FR_Wheel/If v&gt;=10 km//h/Subtract 
  // Signal name: subtract_124_signal; 
 // Predecessors (2): whespd__m_s__122 (brake_acc_nodiv/ABS_FR_Wheel/If v&gt;=10 km//h/wheSpd (m//s)); v__m_s__123 (brake_acc_nodiv/ABS_FR_Wheel/If v&gt;=10 km//h/v (m//s)); successors begin (1): positive_125 (brake_acc_nodiv/ABS_FR_Wheel/If v&gt;=10 km//h/positive); </declaration>
		<location id="id363" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id364" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id365" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id365"/>
		<transition>
			<source ref="id363"/>
			<target ref="id363"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id364"/>
			<target ref="id363"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id365"/>
			<target ref="id364"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>positive_125</name>
		<declaration>const double ts = T_abs;
const double sn = 125.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){ 
if(subtract_124_signal &gt;= inf) {positive_125_signal = inf;}
if(subtract_124_signal &lt;= 0.0) {positive_125_signal = 0.0;}
if(subtract_124_signal&lt; inf &amp;&amp; subtract_124_signal &gt; 0.0){positive_125_signal = subtract_124_signal;}
}



void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_FR_Wheel/If v&gt;=10 km//h/positive 
  // Signal name: positive_125_signal; 
 // Predecessors (1): subtract_124 (brake_acc_nodiv/ABS_FR_Wheel/If v&gt;=10 km//h/Subtract); successors begin (1): times_10_126 (brake_acc_nodiv/ABS_FR_Wheel/If v&gt;=10 km//h/times_10); </declaration>
		<location id="id366" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id367" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id368" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id368"/>
		<transition>
			<source ref="id366"/>
			<target ref="id366"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id367"/>
			<target ref="id366"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id368"/>
			<target ref="id367"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>times_10_126</name>
		<declaration>const double ts = T_abs;
const double sn = 126.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 times_10_126_signal = positive_125_signal * 10;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_FR_Wheel/If v&gt;=10 km//h/times_10 
  // Signal name: times_10_126_signal; 
 // Predecessors (1): positive_125 (brake_acc_nodiv/ABS_FR_Wheel/If v&gt;=10 km//h/positive); successors begin (1): relational_operator_128 (brake_acc_nodiv/ABS_FR_Wheel/If v&gt;=10 km//h/Relational Operator); </declaration>
		<location id="id369" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id370" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id371" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id371"/>
		<transition>
			<source ref="id369"/>
			<target ref="id369"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id370"/>
			<target ref="id369"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id371"/>
			<target ref="id370"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>slip_abs_on_times_10_127</name>
		<declaration>const double ts = T_abs;
const double sn = 127.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 slip_abs_on_times_10_127_signal = v__m_s__123_signal * 10*slip_abs_on;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_FR_Wheel/If v&gt;=10 km//h/slip_abs_on_times_10 
  // Signal name: slip_abs_on_times_10_127_signal; 
 // Predecessors (1): v__m_s__123 (brake_acc_nodiv/ABS_FR_Wheel/If v&gt;=10 km//h/v (m//s)); successors begin (1): relational_operator_128 (brake_acc_nodiv/ABS_FR_Wheel/If v&gt;=10 km//h/Relational Operator); </declaration>
		<location id="id372" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id373" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id374" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id374"/>
		<transition>
			<source ref="id372"/>
			<target ref="id372"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id373"/>
			<target ref="id372"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id374"/>
			<target ref="id373"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>relational_operator_128</name>
		<declaration>const double ts = T_abs;
const double sn = 128.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
bool intermediateValue = times_10_126_signal &gt; slip_abs_on_times_10_127_signal;
if(intermediateValue){relational_operator_128_signal = 1.0;}
else{relational_operator_128_signal = 0.0;}

}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_FR_Wheel/If v&gt;=10 km//h/Relational Operator 
  // Signal name: relational_operator_128_signal; 
 // Predecessors (2): times_10_126 (brake_acc_nodiv/ABS_FR_Wheel/If v&gt;=10 km//h/times_10); slip_abs_on_times_10_127 (brake_acc_nodiv/ABS_FR_Wheel/If v&gt;=10 km//h/slip_abs_on_times_10); successors begin (1): lockdetect_131 (brake_acc_nodiv/ABS_FR_Wheel/If v&gt;=10 km//h/LockDetect); </declaration>
		<location id="id375" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id376" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id377" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id377"/>
		<transition>
			<source ref="id375"/>
			<target ref="id375"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id376"/>
			<target ref="id375"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id377"/>
			<target ref="id376"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>lockdetect_131</name>
		<declaration>const double ts = T_abs;
const double sn = 131.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
if(relational_operator_128_signal &gt; 0) {lockdetect_131_signal = releasebrake_130_signal;} 
else {lockdetect_131_signal = distribution_199_signal;}
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_FR_Wheel/If v&gt;=10 km//h/LockDetect 
  // Signal name: lockdetect_131_signal; 
 // Predecessors (3): releasebrake_130 (brake_acc_nodiv/ABS_FR_Wheel/If v&gt;=10 km//h/ReleaseBrake); relational_operator_128 (brake_acc_nodiv/ABS_FR_Wheel/If v&gt;=10 km//h/Relational Operator); distribution_199 (brake_acc_nodiv/Global Brake Controller/Distribution); successors begin (1): threshold_10km_h_132 (brake_acc_nodiv/ABS_FR_Wheel/Threshold_10km//h); </declaration>
		<location id="id378" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id379" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id380" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id380"/>
		<transition>
			<source ref="id378"/>
			<target ref="id378"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id379"/>
			<target ref="id378"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id380"/>
			<target ref="id379"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>threshold_10km_h_132</name>
		<declaration>const double ts = T_abs;
const double sn = 132.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
if(v__km_h__204_signal &gt;= 10) {threshold_10km_h_132_signal = lockdetect_131_signal;} 
else {threshold_10km_h_132_signal = distribution_199_signal;}
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_FR_Wheel/Threshold_10km//h 
  // Signal name: threshold_10km_h_132_signal; 
 // Predecessors (3): lockdetect_131 (brake_acc_nodiv/ABS_FR_Wheel/If v&gt;=10 km//h/LockDetect); v__km_h__204 (brake_acc_nodiv/Veh_Speed_Estimator/v (km//h)); distribution_199 (brake_acc_nodiv/Global Brake Controller/Distribution); successors begin (2): negative2_70 (brake_acc_nodiv/Vehicle_Body_Wheels/negative2); fr_71 (brake_acc_nodiv/Vehicle_Body_Wheels/FR); </declaration>
		<location id="id381" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id382" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id383" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id383"/>
		<transition>
			<source ref="id381"/>
			<target ref="id381"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id382"/>
			<target ref="id381"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id383"/>
			<target ref="id382"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">to_int_135</name>
		<declaration>clock t;
const double sn=135.0;

 bool rounding = true;
double i, in_prev;
/* Rounding */            void blockRoutine()
            {
            while(rounding)
            {
                i = i + 1.0;
                if (i &gt; w__rpm__45_signal)
                {
                    if(2 == 0)//floor
                        add_201_signal = i-1.0;
                    else if(2 == 1)//ceiling
                        add_201_signal = i;
                    else if(2 == 2)//round
                    {
                        if(i - w__rpm__45_signal &gt; 0.5)//floor
                            to_int_135_signal = i-1.0;
                        else//ceiling
                            to_int_135_signal = i;
                    }
                    rounding = false;
                }
            }rounding = true;i = 0.0;
            }
        

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/HW_RREncoder/to_int 
  // Signal name: to_int_135_signal; 
 // Predecessors (1): w__rpm__45 (brake_acc_nodiv/Vehicle_Body_Wheels/RR_Wheel/w (rpm)); successors begin (3): add_201 (brake_acc_nodiv/Veh_Speed_Estimator/Add); terminator_0 (brake_acc_nodiv/Global Brake Controller/Terminator); whespd__m_s__138 (brake_acc_nodiv/ABS_RR_Wheel/If v&gt;=10 km//h/wheSpd (m//s)); </declaration>
		<location id="id384" x="93" y="-17">
			<name x="110" y="-25">Operate</name>
			<label kind="exponentialrate" x="110" y="0">1000</label>
		</location>
		<location id="id385" x="-144" y="-17">
			<name x="-169" y="-51">Start</name>
			<label kind="invariant" x="-186" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id385"/>
		<transition>
			<source ref="id385"/>
			<target ref="id384"/>
			<label kind="guard" x="-68" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-59" y="-17">initialize(), blockRoutine()</label>
		</transition>
		<transition>
			<source ref="id384"/>
			<target ref="id384"/>
			<label kind="assignment" x="93" y="-93">blockRoutine()</label>
			<nail x="93" y="-76"/>
			<nail x="187" y="-76"/>
			<nail x="187" y="51"/>
			<nail x="93" y="51"/>
		</transition>
	</template>
	<template>
		<name>whespd__m_s__138</name>
		<declaration>const double ts = T_abs;
const double sn = 138.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 whespd__m_s__138_signal = to_int_135_signal * R*pi/30;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_RR_Wheel/If v&gt;=10 km//h/wheSpd (m//s) 
  // Signal name: whespd__m_s__138_signal; 
 // Predecessors (1): to_int_135 (brake_acc_nodiv/HW_RREncoder/to_int); successors begin (1): subtract_140 (brake_acc_nodiv/ABS_RR_Wheel/If v&gt;=10 km//h/Subtract); </declaration>
		<location id="id386" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id387" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id388" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id388"/>
		<transition>
			<source ref="id386"/>
			<target ref="id386"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id387"/>
			<target ref="id386"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id388"/>
			<target ref="id387"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>v__m_s__139</name>
		<declaration>const double ts = T_abs;
const double sn = 139.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 v__m_s__139_signal = v__km_h__204_signal * 10/36;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_RR_Wheel/If v&gt;=10 km//h/v (m//s) 
  // Signal name: v__m_s__139_signal; 
 // Predecessors (1): v__km_h__204 (brake_acc_nodiv/Veh_Speed_Estimator/v (km//h)); successors begin (2): slip_abs_on_times_10_143 (brake_acc_nodiv/ABS_RR_Wheel/If v&gt;=10 km//h/slip_abs_on_times_10); subtract_140 (brake_acc_nodiv/ABS_RR_Wheel/If v&gt;=10 km//h/Subtract); </declaration>
		<location id="id389" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id390" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id391" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id391"/>
		<transition>
			<source ref="id389"/>
			<target ref="id389"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id390"/>
			<target ref="id389"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id391"/>
			<target ref="id390"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>subtract_140</name>
		<declaration>const double ts = T_abs;
const 
double sn = 140.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
 subtract_140_signal = -whespd__m_s__138_signal+v__m_s__139_signal; 
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_RR_Wheel/If v&gt;=10 km//h/Subtract 
  // Signal name: subtract_140_signal; 
 // Predecessors (2): whespd__m_s__138 (brake_acc_nodiv/ABS_RR_Wheel/If v&gt;=10 km//h/wheSpd (m//s)); v__m_s__139 (brake_acc_nodiv/ABS_RR_Wheel/If v&gt;=10 km//h/v (m//s)); successors begin (1): positive_141 (brake_acc_nodiv/ABS_RR_Wheel/If v&gt;=10 km//h/positive); </declaration>
		<location id="id392" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id393" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id394" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id394"/>
		<transition>
			<source ref="id392"/>
			<target ref="id392"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id393"/>
			<target ref="id392"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id394"/>
			<target ref="id393"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>positive_141</name>
		<declaration>const double ts = T_abs;
const double sn = 141.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){ 
if(subtract_140_signal &gt;= inf) { positive_141_signal=inf;}
if(subtract_140_signal &lt;= 0.0) { positive_141_signal=0.0;}
if(subtract_140_signal&gt;0.0 &amp;&amp; subtract_140_signal&lt;inf) {positive_141_signal=subtract_140_signal;} 
}



void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_RR_Wheel/If v&gt;=10 km//h/positive 
  // Signal name: positive_141_signal; 
 // Predecessors (1): subtract_140 (brake_acc_nodiv/ABS_RR_Wheel/If v&gt;=10 km//h/Subtract); successors begin (1): times_10_142 (brake_acc_nodiv/ABS_RR_Wheel/If v&gt;=10 km//h/times_10); </declaration>
		<location id="id395" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id396" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id397" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id397"/>
		<transition>
			<source ref="id395"/>
			<target ref="id395"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id396"/>
			<target ref="id395"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id397"/>
			<target ref="id396"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>times_10_142</name>
		<declaration>const double ts = T_abs;
const double sn = 142.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 times_10_142_signal = positive_141_signal * 10;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_RR_Wheel/If v&gt;=10 km//h/times_10 
  // Signal name: times_10_142_signal; 
 // Predecessors (1): positive_141 (brake_acc_nodiv/ABS_RR_Wheel/If v&gt;=10 km//h/positive); successors begin (1): relational_operator_144 (brake_acc_nodiv/ABS_RR_Wheel/If v&gt;=10 km//h/Relational Operator); </declaration>
		<location id="id398" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id399" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id400" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id400"/>
		<transition>
			<source ref="id398"/>
			<target ref="id398"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id399"/>
			<target ref="id398"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id400"/>
			<target ref="id399"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>slip_abs_on_times_10_143</name>
		<declaration>const double ts = T_abs;
const double sn = 143.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 slip_abs_on_times_10_143_signal = v__m_s__139_signal * 10*slip_abs_on;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_RR_Wheel/If v&gt;=10 km//h/slip_abs_on_times_10 
  // Signal name: slip_abs_on_times_10_143_signal; 
 // Predecessors (1): v__m_s__139 (brake_acc_nodiv/ABS_RR_Wheel/If v&gt;=10 km//h/v (m//s)); successors begin (1): relational_operator_144 (brake_acc_nodiv/ABS_RR_Wheel/If v&gt;=10 km//h/Relational Operator); </declaration>
		<location id="id401" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id402" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id403" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id403"/>
		<transition>
			<source ref="id401"/>
			<target ref="id401"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id402"/>
			<target ref="id401"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id403"/>
			<target ref="id402"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>relational_operator_144</name>
		<declaration>const double ts = T_abs;
const double sn = 144.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
bool intermediateValue = times_10_142_signal &gt; slip_abs_on_times_10_143_signal;
if(intermediateValue){relational_operator_144_signal = 1.0;}
else{relational_operator_144_signal = 0.0;}

}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_RR_Wheel/If v&gt;=10 km//h/Relational Operator 
  // Signal name: relational_operator_144_signal; 
 // Predecessors (2): times_10_142 (brake_acc_nodiv/ABS_RR_Wheel/If v&gt;=10 km//h/times_10); slip_abs_on_times_10_143 (brake_acc_nodiv/ABS_RR_Wheel/If v&gt;=10 km//h/slip_abs_on_times_10); successors begin (1): lockdetect_147 (brake_acc_nodiv/ABS_RR_Wheel/If v&gt;=10 km//h/LockDetect); </declaration>
		<location id="id404" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id405" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id406" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id406"/>
		<transition>
			<source ref="id404"/>
			<target ref="id404"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id405"/>
			<target ref="id404"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id406"/>
			<target ref="id405"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>lockdetect_147</name>
		<declaration>const double ts = T_abs;
const double sn = 147.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
if(relational_operator_144_signal &gt; 0) {
lockdetect_147_signal = releasebrake_146_signal;
} else {
lockdetect_147_signal = distribution_199_signal;
}
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_RR_Wheel/If v&gt;=10 km//h/LockDetect 
  // Signal name: lockdetect_147_signal; 
 // Predecessors (3): releasebrake_146 (brake_acc_nodiv/ABS_RR_Wheel/If v&gt;=10 km//h/ReleaseBrake); relational_operator_144 (brake_acc_nodiv/ABS_RR_Wheel/If v&gt;=10 km//h/Relational Operator); distribution_199 (brake_acc_nodiv/Global Brake Controller/Distribution); successors begin (1): threshold_10km_h_148 (brake_acc_nodiv/ABS_RR_Wheel/Threshold_10km//h); </declaration>
		<location id="id407" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id408" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id409" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id409"/>
		<transition>
			<source ref="id407"/>
			<target ref="id407"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id408"/>
			<target ref="id407"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id409"/>
			<target ref="id408"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>threshold_10km_h_148</name>
		<declaration>const double ts = T_abs;
const double sn = 148.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
if(v__km_h__204_signal &gt;= 10) {threshold_10km_h_148_signal = lockdetect_147_signal;} 
else {threshold_10km_h_148_signal = distribution_199_signal;}
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_RR_Wheel/Threshold_10km//h 
  // Signal name: threshold_10km_h_148_signal; 
 // Predecessors (3): lockdetect_147 (brake_acc_nodiv/ABS_RR_Wheel/If v&gt;=10 km//h/LockDetect); v__km_h__204 (brake_acc_nodiv/Veh_Speed_Estimator/v (km//h)); distribution_199 (brake_acc_nodiv/Global Brake Controller/Distribution); successors begin (2): rr_18 (brake_acc_nodiv/Vehicle_Body_Wheels/RR); negative_17 (brake_acc_nodiv/Vehicle_Body_Wheels/negative); </declaration>
		<location id="id410" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id411" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id412" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id412"/>
		<transition>
			<source ref="id410"/>
			<target ref="id410"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id411"/>
			<target ref="id410"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id412"/>
			<target ref="id411"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">to_int1_151</name>
		<declaration>clock t;
const double sn = 151.0;

 bool rounding = true;
double i, in_prev;
/* Rounding */            void blockRoutine()
            {
            while(rounding)
            {
                i = i + 1.0;
                if (i &gt; w__rpm__69_signal)
                {
                    if(2 == 0)//floor
                        whespd__m_s__184_signal = i-1.0;
                    else if(2 == 1)//ceiling
                        whespd__m_s__184_signal = i;
                    else if(2 == 2)//round
                    {
                        if(i - w__rpm__69_signal &gt; 0.5)//floor
                            to_int1_151_signal = i-1.0;
                        else//ceiling
                            to_int1_151_signal = i;
                    }
                    rounding = false;
                }
            }rounding = true;i = 0.0;
            }
        

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/HW_FLEncoder/to_int1 
  // Signal name: to_int1_151_signal; 
 // Predecessors (1): w__rpm__69 (brake_acc_nodiv/Vehicle_Body_Wheels/FL_Wheel/w (rpm)); successors begin (3): whespd__m_s__184 (brake_acc_nodiv/ABS_FL_Wheel/If v&gt;=10 km//h/wheSpd (m//s)); terminator3_0 (brake_acc_nodiv/Global Brake Controller/Terminator3); add_201 (brake_acc_nodiv/Veh_Speed_Estimator/Add); </declaration>
		<location id="id413" x="93" y="-17">
			<name x="110" y="-25">Operate</name>
			<label kind="exponentialrate" x="110" y="0">1000</label>
		</location>
		<location id="id414" x="-144" y="-17">
			<name x="-169" y="-51">Start</name>
			<label kind="invariant" x="-186" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id414"/>
		<transition>
			<source ref="id414"/>
			<target ref="id413"/>
			<label kind="guard" x="-68" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-59" y="-17">initialize(), blockRoutine()</label>
		</transition>
		<transition>
			<source ref="id413"/>
			<target ref="id413"/>
			<label kind="assignment" x="93" y="-93">blockRoutine()</label>
			<nail x="93" y="-76"/>
			<nail x="187" y="-76"/>
			<nail x="187" y="51"/>
			<nail x="93" y="51"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">driver_brake_160</name>
		<declaration>clock t, x;
const double sn = 160.0;

//double rep_seq_t[5]={0.0, 19.5, 20.0, 100.0};
//double rep_seq_y[5]={0.0, 0.0, 100.0, 100.0};

void blockRoutine(){ 
if (19.5&gt;=t) {driver_brake_160_signal=0.0;x=0;}
if (t&gt;19.5 &amp;&amp; 20.0&gt;=t) {driver_brake_160_signal=x*200.0;}
if (t&gt;20.0) {driver_brake_160_signal=100.0;}
}



void customInit(){}

void initialize(){
t = 0; x=0;
customInit();
}
</declaration>
		<location id="id415" x="93" y="-17">
			<name x="110" y="-25">Operate</name>
			<label kind="exponentialrate" x="110" y="0">1000</label>
		</location>
		<location id="id416" x="-178" y="-17">
			<name x="-203" y="-51">Start</name>
			<label kind="invariant" x="-238" y="0">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id416"/>
		<transition>
			<source ref="id416"/>
			<target ref="id415"/>
			<label kind="guard" x="-85" y="-42">gtime &gt;= sn*IAT</label>
			<label kind="synchronisation" x="-68" y="-59">trigg[160]!</label>
			<label kind="assignment" x="-119" y="-17">initialize(), blockRoutine()</label>
		</transition>
		<transition>
			<source ref="id415"/>
			<target ref="id415"/>
			<label kind="synchronisation" x="102" y="-110">trigg[160]!</label>
			<label kind="assignment" x="93" y="-93">blockRoutine()</label>
			<nail x="93" y="-76"/>
			<nail x="187" y="-76"/>
			<nail x="187" y="51"/>
			<nail x="93" y="51"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">pedal_map_161</name>
		<declaration>clock t;
const double sn = 161.0;

void blockRoutine(){ 
if(driver_brake_160_signal &lt;= 0.0) {pedal_map_161_signal=0.0;}
if(driver_brake_160_signal &gt;= 100.0) {pedal_map_161_signal=100.0;}
if(driver_brake_160_signal&gt;0.0 &amp;&amp; driver_brake_160_signal&lt;100.0) {pedal_map_161_signal=driver_brake_160_signal;} 
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/HW_BrakePedal/Pedal_map 
  // Signal name: pedal_map_161_signal; 
 // Predecessors (1): driver_brake_160 (brake_acc_nodiv/Driver_Brake); successors begin (1): round_to_int_163 (brake_acc_nodiv/LDM_BrakePedal/round_to_int); </declaration>
		<location id="id417" x="93" y="-17">
			<name x="110" y="-25">Operate</name>
			<label kind="exponentialrate" x="110" y="0">1000</label>
		</location>
		<location id="id418" x="-144" y="-17">
			<name x="-169" y="-51">Start</name>
			<label kind="invariant" x="-186" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id418"/>
		<transition>
			<source ref="id418"/>
			<target ref="id417"/>
			<label kind="guard" x="-68" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="synchronisation" x="-34" y="-68">trigg[161]!</label>
			<label kind="assignment" x="-110" y="-8">initialize(), blockRoutine()</label>
		</transition>
		<transition>
			<source ref="id417"/>
			<target ref="id417"/>
			<label kind="synchronisation" x="102" y="-110">trigg[161]!</label>
			<label kind="assignment" x="93" y="-93">blockRoutine()</label>
			<nail x="93" y="-76"/>
			<nail x="187" y="-76"/>
			<nail x="187" y="51"/>
			<nail x="93" y="51"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">round_to_int_163</name>
		<declaration>clock t;
const double sn = 163.0;

bool rounding = true;
double i, in_prev;
void blockRoutine()
            {
            while(rounding)
            {
                i = i + 1.0;
                if (i &gt; pedal_map_161_signal)
                {
                    if(2 == 0)//floor
                        gain1_165_signal = i-1.0;
                    else if(2 == 1)//ceiling
                        gain1_165_signal = i;
                    else if(2 == 2)//round
                    {
                        if(i - pedal_map_161_signal &gt; 0.5)//floor
                            round_to_int_163_signal = i-1.0;
                        else//ceiling
                            round_to_int_163_signal = i;
                    }
                    rounding = false;
                }
            }rounding = true;i = 0.0;
            }


void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/LDM_BrakePedal/round_to_int 
  // Signal name: round_to_int_163_signal; 
 // Predecessors (1): pedal_map_161 (brake_acc_nodiv/HW_BrakePedal/Pedal_map); successors begin (1): gain1_165 (brake_acc_nodiv/Brake_Torq_Calculation/Gain1); </declaration>
		<location id="id419" x="93" y="-17">
			<name x="110" y="-25">Operate</name>
			<label kind="exponentialrate" x="110" y="0">1000</label>
		</location>
		<location id="id420" x="-144" y="-17">
			<name x="-169" y="-51">Start</name>
			<label kind="invariant" x="-186" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id420"/>
		<transition>
			<source ref="id420"/>
			<target ref="id419"/>
			<label kind="guard" x="-68" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="synchronisation" x="-51" y="-68">trigg[163]!</label>
			<label kind="assignment" x="-59" y="-17">initialize(), blockRoutine()</label>
		</transition>
		<transition>
			<source ref="id419"/>
			<target ref="id419"/>
			<label kind="synchronisation" x="110" y="-110">trigg[163]!</label>
			<label kind="assignment" x="93" y="-93">blockRoutine()</label>
			<nail x="93" y="-76"/>
			<nail x="187" y="-76"/>
			<nail x="187" y="51"/>
			<nail x="93" y="51"/>
		</transition>
	</template>
	<template>
		<name>gain1_165</name>
		<declaration>const double ts = T_brake_pedal;
const 
double sn = 165.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 gain1_165_signal = round_to_int_163_signal * maxBrakeTorque/100;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Brake_Torq_Calculation/Gain1 
  // Signal name: gain1_165_signal; 
 // Predecessors (1): round_to_int_163 (brake_acc_nodiv/LDM_BrakePedal/round_to_int); successors begin (1): distribution_199 (brake_acc_nodiv/Global Brake Controller/Distribution); </declaration>
		<location id="id421" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id422" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id423" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id423"/>
		<transition>
			<source ref="id421"/>
			<target ref="id421"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="synchronisation" x="119" y="-110">trigg[165]!</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id422"/>
			<target ref="id421"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="synchronisation" x="-34" y="-68">trigg[165]!</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id423"/>
			<target ref="id422"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">to_int_167</name>
		<declaration>clock t;
const double sn = 167.0;

bool rounding = true;
double i;
void blockRoutine()
            {
            while(rounding)
            {
                i = i + 1.0;
                if (i &gt; w__rpm__117_signal)
                {
                    if(2 == 0)//floor
                        add_201_signal = i-1.0;
                    else if(2 == 1)//ceiling
                        add_201_signal = i;
                    else if(2 == 2)//round
                    {
                        if(i - w__rpm__117_signal &gt; 0.5)//floor
                            to_int_167_signal = i-1.0;
                        else//ceiling
                            to_int_167_signal = i;
                    }
                    rounding = false;
                }
            }rounding = true;i = 0.0;
            }
        

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/HW_RLEncoder/to_int 
  // Signal name: to_int_167_signal; 
 // Predecessors (1): w__rpm__117 (brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/w (rpm)); successors begin (3): add_201 (brake_acc_nodiv/Veh_Speed_Estimator/Add); terminator1_0 (brake_acc_nodiv/Global Brake Controller/Terminator1); whespd__m_s__170 (brake_acc_nodiv/ABS_RL_Wheel/If v&gt;=10 km//h/wheSpd (m//s)); </declaration>
		<location id="id424" x="93" y="-17">
			<name x="110" y="-25">Operate</name>
			<label kind="exponentialrate" x="110" y="0">1000</label>
		</location>
		<location id="id425" x="-144" y="-17">
			<name x="-169" y="-51">Start</name>
			<label kind="invariant" x="-186" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id425"/>
		<transition>
			<source ref="id425"/>
			<target ref="id424"/>
			<label kind="guard" x="-68" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-59" y="-17">initialize(), blockRoutine()</label>
		</transition>
		<transition>
			<source ref="id424"/>
			<target ref="id424"/>
			<label kind="assignment" x="93" y="-93">blockRoutine()</label>
			<nail x="93" y="-76"/>
			<nail x="187" y="-76"/>
			<nail x="187" y="51"/>
			<nail x="93" y="51"/>
		</transition>
	</template>
	<template>
		<name>whespd__m_s__170</name>
		<declaration>const double ts = T_abs;
const double sn = 170.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 whespd__m_s__170_signal = to_int_167_signal * R*pi/30;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_RL_Wheel/If v&gt;=10 km//h/wheSpd (m//s) 
  // Signal name: whespd__m_s__170_signal; 
 // Predecessors (1): to_int_167 (brake_acc_nodiv/HW_RLEncoder/to_int); successors begin (1): subtract_172 (brake_acc_nodiv/ABS_RL_Wheel/If v&gt;=10 km//h/Subtract); </declaration>
		<location id="id426" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id427" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id428" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id428"/>
		<transition>
			<source ref="id426"/>
			<target ref="id426"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="synchronisation" x="120" y="-93">trigg[170]!</label>
			<label kind="assignment" x="93" y="-110">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id427"/>
			<target ref="id426"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="synchronisation" x="-67" y="-34">trigg[170]!</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id428"/>
			<target ref="id427"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>v__m_s__171</name>
		<declaration>const double ts = T_abs;
const double sn = 171.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 v__m_s__171_signal = v__km_h__204_signal * 10/36;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_RL_Wheel/If v&gt;=10 km//h/v (m//s) 
  // Signal name: v__m_s__171_signal; 
 // Predecessors (1): v__km_h__204 (brake_acc_nodiv/Veh_Speed_Estimator/v (km//h)); successors begin (2): subtract_172 (brake_acc_nodiv/ABS_RL_Wheel/If v&gt;=10 km//h/Subtract); slip_abs_on_times_10_175 (brake_acc_nodiv/ABS_RL_Wheel/If v&gt;=10 km//h/slip_abs_on_times_10); </declaration>
		<location id="id429" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id430" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id431" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id431"/>
		<transition>
			<source ref="id429"/>
			<target ref="id429"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="synchronisation" x="120" y="-93">trigg[171]!</label>
			<label kind="assignment" x="102" y="-110">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id430"/>
			<target ref="id429"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="synchronisation" x="-67" y="-34">trigg[171]!</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id431"/>
			<target ref="id430"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>subtract_172</name>
		<declaration>const double ts = T_abs;
const double sn = 172.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
 subtract_172_signal = -whespd__m_s__170_signal+v__m_s__171_signal; 
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_RL_Wheel/If v&gt;=10 km//h/Subtract 
  // Signal name: subtract_172_signal; 
 // Predecessors (2): whespd__m_s__170 (brake_acc_nodiv/ABS_RL_Wheel/If v&gt;=10 km//h/wheSpd (m//s)); v__m_s__171 (brake_acc_nodiv/ABS_RL_Wheel/If v&gt;=10 km//h/v (m//s)); successors begin (1): positive_173 (brake_acc_nodiv/ABS_RL_Wheel/If v&gt;=10 km//h/positive); </declaration>
		<location id="id432" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id433" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id434" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id434"/>
		<transition>
			<source ref="id432"/>
			<target ref="id432"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="synchronisation" x="120" y="-93">trigg[172]!</label>
			<label kind="assignment" x="93" y="-110">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id433"/>
			<target ref="id432"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="synchronisation" x="-67" y="-34">trigg[172]!</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id434"/>
			<target ref="id433"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>positive_173</name>
		<declaration>const double ts = T_abs;const 
double sn = 173.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){ 

if(subtract_172_signal &gt;= inf) {positive_173_signal = inf;}
if(subtract_172_signal &lt;= 0.0) {positive_173_signal = 0.0;}
if(subtract_172_signal&lt; inf &amp;&amp; subtract_172_signal&gt;0.0) {positive_173_signal=subtract_172_signal; }
}



void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_RL_Wheel/If v&gt;=10 km//h/positive 
  // Signal name: positive_173_signal; 
 // Predecessors (1): subtract_172 (brake_acc_nodiv/ABS_RL_Wheel/If v&gt;=10 km//h/Subtract); successors begin (1): times_10_174 (brake_acc_nodiv/ABS_RL_Wheel/If v&gt;=10 km//h/times_10); </declaration>
		<location id="id435" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id436" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id437" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id437"/>
		<transition>
			<source ref="id435"/>
			<target ref="id435"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="synchronisation" x="120" y="-93">trigg[173]!</label>
			<label kind="assignment" x="93" y="-110">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id436"/>
			<target ref="id435"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="synchronisation" x="-67" y="-34">trigg[173]!</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id437"/>
			<target ref="id436"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>times_10_174</name>
		<declaration>const double ts = T_abs;
const double sn = 174.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 times_10_174_signal = positive_173_signal * 10;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_RL_Wheel/If v&gt;=10 km//h/times_10 
  // Signal name: times_10_174_signal; 
 // Predecessors (1): positive_173 (brake_acc_nodiv/ABS_RL_Wheel/If v&gt;=10 km//h/positive); successors begin (1): relational_operator_176 (brake_acc_nodiv/ABS_RL_Wheel/If v&gt;=10 km//h/Relational Operator); </declaration>
		<location id="id438" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id439" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id440" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id440"/>
		<transition>
			<source ref="id438"/>
			<target ref="id438"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="synchronisation" x="120" y="-93">trigg[174]!</label>
			<label kind="assignment" x="93" y="-110">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id439"/>
			<target ref="id438"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="synchronisation" x="-67" y="-34">trigg[174]!</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id440"/>
			<target ref="id439"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>slip_abs_on_times_10_175</name>
		<declaration>const double ts = T_abs;
const double sn = 175.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 slip_abs_on_times_10_175_signal = v__m_s__171_signal * 10*slip_abs_on;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_RL_Wheel/If v&gt;=10 km//h/slip_abs_on_times_10 
  // Signal name: slip_abs_on_times_10_175_signal; 
 // Predecessors (1): v__m_s__171 (brake_acc_nodiv/ABS_RL_Wheel/If v&gt;=10 km//h/v (m//s)); successors begin (1): relational_operator_176 (brake_acc_nodiv/ABS_RL_Wheel/If v&gt;=10 km//h/Relational Operator); </declaration>
		<location id="id441" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id442" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id443" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id443"/>
		<transition>
			<source ref="id441"/>
			<target ref="id441"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="synchronisation" x="120" y="-93">trigg[175]!</label>
			<label kind="assignment" x="93" y="-110">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id442"/>
			<target ref="id441"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="synchronisation" x="-67" y="-34">trigg[175]!</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id443"/>
			<target ref="id442"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>relational_operator_176</name>
		<declaration>const double ts = T_abs;
const double sn = 176.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
bool intermediateValue = times_10_174_signal &gt; slip_abs_on_times_10_175_signal;
if(intermediateValue){relational_operator_176_signal = 1.0;}
else{relational_operator_176_signal = 0.0;}
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_RL_Wheel/If v&gt;=10 km//h/Relational Operator 
  // Signal name: relational_operator_176_signal; 
 // Predecessors (2): times_10_174 (brake_acc_nodiv/ABS_RL_Wheel/If v&gt;=10 km//h/times_10); slip_abs_on_times_10_175 (brake_acc_nodiv/ABS_RL_Wheel/If v&gt;=10 km//h/slip_abs_on_times_10); successors begin (1): lockdetect_179 (brake_acc_nodiv/ABS_RL_Wheel/If v&gt;=10 km//h/LockDetect); </declaration>
		<location id="id444" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id445" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id446" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id446"/>
		<transition>
			<source ref="id444"/>
			<target ref="id444"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="synchronisation" x="120" y="-93">trigg[176]!</label>
			<label kind="assignment" x="85" y="-110">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id445"/>
			<target ref="id444"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="synchronisation" x="-67" y="-34">trigg[176]!</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id446"/>
			<target ref="id445"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>lockdetect_179</name>
		<declaration>const double ts = T_abs;
const double sn = 179.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
if(relational_operator_176_signal &gt; 0) {lockdetect_179_signal = releasebrake_178_signal;} 
else {lockdetect_179_signal = distribution_199_signal;}
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_RL_Wheel/If v&gt;=10 km//h/LockDetect 
  // Signal name: lockdetect_179_signal; 
 // Predecessors (3): releasebrake_178 (brake_acc_nodiv/ABS_RL_Wheel/If v&gt;=10 km//h/ReleaseBrake); relational_operator_176 (brake_acc_nodiv/ABS_RL_Wheel/If v&gt;=10 km//h/Relational Operator); distribution_199 (brake_acc_nodiv/Global Brake Controller/Distribution); successors begin (1): threshold_10km_h_180 (brake_acc_nodiv/ABS_RL_Wheel/Threshold_10km//h); </declaration>
		<location id="id447" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id448" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id449" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id449"/>
		<transition>
			<source ref="id447"/>
			<target ref="id447"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="synchronisation" x="119" y="-110">trigg[179]!</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id448"/>
			<target ref="id447"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="synchronisation" x="-34" y="-68">trigg[179]!</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id449"/>
			<target ref="id448"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>threshold_10km_h_180</name>
		<declaration>const double ts = T_abs;
const double sn = 180.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
if(v__km_h__204_signal &gt;= 10) {threshold_10km_h_180_signal = lockdetect_179_signal;} 
else {threshold_10km_h_180_signal = distribution_199_signal;}
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_RL_Wheel/Threshold_10km//h 
  // Signal name: threshold_10km_h_180_signal; 
 // Predecessors (3): lockdetect_179 (brake_acc_nodiv/ABS_RL_Wheel/If v&gt;=10 km//h/LockDetect); v__km_h__204 (brake_acc_nodiv/Veh_Speed_Estimator/v (km//h)); distribution_199 (brake_acc_nodiv/Global Brake Controller/Distribution); successors begin (2): negative1_94 (brake_acc_nodiv/Vehicle_Body_Wheels/negative1); rl_95 (brake_acc_nodiv/Vehicle_Body_Wheels/RL); </declaration>
		<location id="id450" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id451" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id452" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id452"/>
		<transition>
			<source ref="id450"/>
			<target ref="id450"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="synchronisation" x="110" y="-110">trigg[180]!</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id451"/>
			<target ref="id450"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="synchronisation" x="-25" y="-68">trigg[180]!</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id452"/>
			<target ref="id451"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>whespd__m_s__184</name>
		<declaration>const double ts = T_abs;const 
double sn = 184.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 whespd__m_s__184_signal = to_int1_151_signal * R*pi/30;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_FL_Wheel/If v&gt;=10 km//h/wheSpd (m//s) 
  // Signal name: whespd__m_s__184_signal; 
 // Predecessors (1): to_int1_151 (brake_acc_nodiv/HW_FLEncoder/to_int1); successors begin (1): subtract_186 (brake_acc_nodiv/ABS_FL_Wheel/If v&gt;=10 km//h/Subtract); </declaration>
		<location id="id453" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id454" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id455" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id455"/>
		<transition>
			<source ref="id453"/>
			<target ref="id453"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id454"/>
			<target ref="id453"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id455"/>
			<target ref="id454"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>v__m_s__185</name>
		<declaration>const double ts = T_abs;
const double sn = 185.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 v__m_s__185_signal = v__km_h__204_signal * 10/36;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_FL_Wheel/If v&gt;=10 km//h/v (m//s) 
  // Signal name: v__m_s__185_signal; 
 // Predecessors (1): v__km_h__204 (brake_acc_nodiv/Veh_Speed_Estimator/v (km//h)); successors begin (2): subtract_186 (brake_acc_nodiv/ABS_FL_Wheel/If v&gt;=10 km//h/Subtract); slip_abs_on_times_10_189 (brake_acc_nodiv/ABS_FL_Wheel/If v&gt;=10 km//h/slip_abs_on_times_10); </declaration>
		<location id="id456" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id457" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id458" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id458"/>
		<transition>
			<source ref="id456"/>
			<target ref="id456"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id457"/>
			<target ref="id456"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id458"/>
			<target ref="id457"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>subtract_186</name>
		<declaration>const double ts = T_abs;
const double sn = 186.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
 subtract_186_signal = -whespd__m_s__184_signal+v__m_s__185_signal; 
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_FL_Wheel/If v&gt;=10 km//h/Subtract 
  // Signal name: subtract_186_signal; 
 // Predecessors (2): whespd__m_s__184 (brake_acc_nodiv/ABS_FL_Wheel/If v&gt;=10 km//h/wheSpd (m//s)); v__m_s__185 (brake_acc_nodiv/ABS_FL_Wheel/If v&gt;=10 km//h/v (m//s)); successors begin (1): positive_187 (brake_acc_nodiv/ABS_FL_Wheel/If v&gt;=10 km//h/positive); </declaration>
		<location id="id459" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id460" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id461" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id461"/>
		<transition>
			<source ref="id459"/>
			<target ref="id459"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id460"/>
			<target ref="id459"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id461"/>
			<target ref="id460"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>positive_187</name>
		<declaration>const double ts = T_abs;
const double sn = 187.0;
const double OFFSET = 0.0;
clock t;
 
void blockRoutine(){ 
if(subtract_186_signal &gt;= inf) {positive_187_signal = inf;}
if(subtract_186_signal &lt;= 0.0) {positive_187_signal = 0.0;}
if(subtract_186_signal&lt; inf &amp;&amp; subtract_186_signal&gt;0.0) {positive_187_signal=subtract_186_signal;}
}



void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_FL_Wheel/If v&gt;=10 km//h/positive 
  // Signal name: positive_187_signal; 
 // Predecessors (1): subtract_186 (brake_acc_nodiv/ABS_FL_Wheel/If v&gt;=10 km//h/Subtract); successors begin (1): times_10_188 (brake_acc_nodiv/ABS_FL_Wheel/If v&gt;=10 km//h/times_10); </declaration>
		<location id="id462" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id463" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id464" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id464"/>
		<transition>
			<source ref="id462"/>
			<target ref="id462"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id463"/>
			<target ref="id462"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id464"/>
			<target ref="id463"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>times_10_188</name>
		<declaration>const double ts = T_abs;
const double sn = 188.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 times_10_188_signal = positive_187_signal * 10;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_FL_Wheel/If v&gt;=10 km//h/times_10 
  // Signal name: times_10_188_signal; 
 // Predecessors (1): positive_187 (brake_acc_nodiv/ABS_FL_Wheel/If v&gt;=10 km//h/positive); successors begin (1): relational_operator_190 (brake_acc_nodiv/ABS_FL_Wheel/If v&gt;=10 km//h/Relational Operator); </declaration>
		<location id="id465" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id466" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id467" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id467"/>
		<transition>
			<source ref="id465"/>
			<target ref="id465"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id466"/>
			<target ref="id465"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id467"/>
			<target ref="id466"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>slip_abs_on_times_10_189</name>
		<declaration>const double ts = T_abs;const 
double sn = 189.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 slip_abs_on_times_10_189_signal = v__m_s__185_signal * 10*slip_abs_on;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_FL_Wheel/If v&gt;=10 km//h/slip_abs_on_times_10 
  // Signal name: slip_abs_on_times_10_189_signal; 
 // Predecessors (1): v__m_s__185 (brake_acc_nodiv/ABS_FL_Wheel/If v&gt;=10 km//h/v (m//s)); successors begin (1): relational_operator_190 (brake_acc_nodiv/ABS_FL_Wheel/If v&gt;=10 km//h/Relational Operator); </declaration>
		<location id="id468" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id469" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id470" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id470"/>
		<transition>
			<source ref="id468"/>
			<target ref="id468"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id469"/>
			<target ref="id468"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id470"/>
			<target ref="id469"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>relational_operator_190</name>
		<declaration>const double ts = T_abs;
const double sn = 190.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
bool intermediateValue = times_10_188_signal &gt; slip_abs_on_times_10_189_signal;
if(intermediateValue){relational_operator_190_signal = 1.0;}
else{relational_operator_190_signal = 0.0;}

}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_FL_Wheel/If v&gt;=10 km//h/Relational Operator 
  // Signal name: relational_operator_190_signal; 
 // Predecessors (2): times_10_188 (brake_acc_nodiv/ABS_FL_Wheel/If v&gt;=10 km//h/times_10); slip_abs_on_times_10_189 (brake_acc_nodiv/ABS_FL_Wheel/If v&gt;=10 km//h/slip_abs_on_times_10); successors begin (1): lockdetect_193 (brake_acc_nodiv/ABS_FL_Wheel/If v&gt;=10 km//h/LockDetect); </declaration>
		<location id="id471" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id472" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id473" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id473"/>
		<transition>
			<source ref="id471"/>
			<target ref="id471"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id472"/>
			<target ref="id471"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id473"/>
			<target ref="id472"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>lockdetect_193</name>
		<declaration>const double ts = T_abs;
const double sn = 193.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
if(relational_operator_190_signal &gt; 0) {lockdetect_193_signal = releasebrake_192_signal;} 
else {lockdetect_193_signal = distribution_199_signal;}
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_FL_Wheel/If v&gt;=10 km//h/LockDetect 
  // Signal name: lockdetect_193_signal; 
 // Predecessors (3): releasebrake_192 (brake_acc_nodiv/ABS_FL_Wheel/If v&gt;=10 km//h/ReleaseBrake); relational_operator_190 (brake_acc_nodiv/ABS_FL_Wheel/If v&gt;=10 km//h/Relational Operator); distribution_199 (brake_acc_nodiv/Global Brake Controller/Distribution); successors begin (1): threshold_10km_h_194 (brake_acc_nodiv/ABS_FL_Wheel/Threshold_10km//h); </declaration>
		<location id="id474" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id475" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id476" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id476"/>
		<transition>
			<source ref="id474"/>
			<target ref="id474"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id475"/>
			<target ref="id474"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id476"/>
			<target ref="id475"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>threshold_10km_h_194</name>
		<declaration>const double ts = T_abs;
const double sn = 194.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
if(v__km_h__204_signal &gt;= 10) {threshold_10km_h_194_signal = lockdetect_193_signal;} 
else {threshold_10km_h_194_signal = distribution_199_signal;}
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/ABS_FL_Wheel/Threshold_10km//h 
  // Signal name: threshold_10km_h_194_signal; 
 // Predecessors (3): lockdetect_193 (brake_acc_nodiv/ABS_FL_Wheel/If v&gt;=10 km//h/LockDetect); v__km_h__204 (brake_acc_nodiv/Veh_Speed_Estimator/v (km//h)); distribution_199 (brake_acc_nodiv/Global Brake Controller/Distribution); successors begin (2): negative3_46 (brake_acc_nodiv/Vehicle_Body_Wheels/negative3); fl_47 (brake_acc_nodiv/Vehicle_Body_Wheels/FL); </declaration>
		<location id="id477" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id478" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id479" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id479"/>
		<transition>
			<source ref="id477"/>
			<target ref="id477"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id478"/>
			<target ref="id477"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id479"/>
			<target ref="id478"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>distribution_199</name>
		<declaration>const double ts = T_brake_ctrl;
const double sn = 199.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 distribution_199_signal = gain1_165_signal * distrib;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Global Brake Controller/Distribution 
  // Signal name: distribution_199_signal; 
 // Predecessors (1): gain1_165 (brake_acc_nodiv/Brake_Torq_Calculation/Gain1); successors begin (8): lockdetect_147 (brake_acc_nodiv/ABS_RR_Wheel/If v&gt;=10 km//h/LockDetect); threshold_10km_h_148 (brake_acc_nodiv/ABS_RR_Wheel/Threshold_10km//h); lockdetect_179 (brake_acc_nodiv/ABS_RL_Wheel/If v&gt;=10 km//h/LockDetect); threshold_10km_h_180 (brake_acc_nodiv/ABS_RL_Wheel/Threshold_10km//h); threshold_10km_h_132 (brake_acc_nodiv/ABS_FR_Wheel/Threshold_10km//h); lockdetect_131 (brake_acc_nodiv/ABS_FR_Wheel/If v&gt;=10 km//h/LockDetect); threshold_10km_h_194 (brake_acc_nodiv/ABS_FL_Wheel/Threshold_10km//h); lockdetect_193 (brake_acc_nodiv/ABS_FL_Wheel/If v&gt;=10 km//h/LockDetect); </declaration>
		<location id="id480" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id481" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id482" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id482"/>
		<transition>
			<source ref="id480"/>
			<target ref="id480"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="synchronisation" x="120" y="-93">trigg[199]!</label>
			<label kind="assignment" x="76" y="-76">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id481"/>
			<target ref="id480"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id482"/>
			<target ref="id481"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>add_201</name>
		<declaration>const double ts = T_spd_est;
const double sn = 201.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine() {
 add_201_signal = +to_int_135_signal+to_int_167_signal+to_int_119_signal+to_int1_151_signal; 
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Veh_Speed_Estimator/Add 
  // Signal name: add_201_signal; 
 // Predecessors (4): to_int_135 (brake_acc_nodiv/HW_RREncoder/to_int); to_int_167 (brake_acc_nodiv/HW_RLEncoder/to_int); to_int_119 (brake_acc_nodiv/HW_FREncoder/to_int); to_int1_151 (brake_acc_nodiv/HW_FLEncoder/to_int1); successors begin (1): average_rpm_202 (brake_acc_nodiv/Veh_Speed_Estimator/average_rpm); </declaration>
		<location id="id483" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id484" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id485" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id485"/>
		<transition>
			<source ref="id483"/>
			<target ref="id483"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id484"/>
			<target ref="id483"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id485"/>
			<target ref="id484"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>average_rpm_202</name>
		<declaration>const double ts = T_spd_est;
const double sn = 202.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 average_rpm_202_signal = add_201_signal * 1/4;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Veh_Speed_Estimator/average_rpm 
  // Signal name: average_rpm_202_signal; 
 // Predecessors (1): add_201 (brake_acc_nodiv/Veh_Speed_Estimator/Add); successors begin (1): w__grad_s__203 (brake_acc_nodiv/Veh_Speed_Estimator/w (grad//s)); </declaration>
		<location id="id486" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id487" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id488" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id488"/>
		<transition>
			<source ref="id486"/>
			<target ref="id486"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id487"/>
			<target ref="id486"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id488"/>
			<target ref="id487"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>w__grad_s__203</name>
		<declaration>const double ts = T_spd_est;
const double sn = 203.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 w__grad_s__203_signal = average_rpm_202_signal * pi/30;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Veh_Speed_Estimator/w (grad//s) 
  // Signal name: w__grad_s__203_signal; 
 // Predecessors (1): average_rpm_202 (brake_acc_nodiv/Veh_Speed_Estimator/average_rpm); successors begin (1): v__km_h__204 (brake_acc_nodiv/Veh_Speed_Estimator/v (km//h)); </declaration>
		<location id="id489" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id490" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id491" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id491"/>
		<transition>
			<source ref="id489"/>
			<target ref="id489"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id490"/>
			<target ref="id489"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id491"/>
			<target ref="id490"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name>v__km_h__204</name>
		<declaration>const double ts = T_spd_est;
const double sn = 204.0;
const double OFFSET = 0.0;
clock t;

void blockRoutine(){
 v__km_h__204_signal = w__grad_s__203_signal * 3.6*R;
}

void customInit(){}

void initialize(){
t = 0;
customInit();
}
// BlockId: brake_acc_nodiv/Veh_Speed_Estimator/v (km//h) 
  // Signal name: v__km_h__204_signal; 
 // Predecessors (1): w__grad_s__203 (brake_acc_nodiv/Veh_Speed_Estimator/w (grad//s)); successors begin (8): threshold_10km_h_194 (brake_acc_nodiv/ABS_FL_Wheel/Threshold_10km//h); v__m_s__185 (brake_acc_nodiv/ABS_FL_Wheel/If v&gt;=10 km//h/v (m//s)); v__m_s__171 (brake_acc_nodiv/ABS_RL_Wheel/If v&gt;=10 km//h/v (m//s)); threshold_10km_h_180 (brake_acc_nodiv/ABS_RL_Wheel/Threshold_10km//h); v__m_s__123 (brake_acc_nodiv/ABS_FR_Wheel/If v&gt;=10 km//h/v (m//s)); threshold_10km_h_132 (brake_acc_nodiv/ABS_FR_Wheel/Threshold_10km//h); threshold_10km_h_148 (brake_acc_nodiv/ABS_RR_Wheel/Threshold_10km//h); v__m_s__139 (brake_acc_nodiv/ABS_RR_Wheel/If v&gt;=10 km//h/v (m//s)); </declaration>
		<location id="id492" x="102" y="-17">
			<name x="119" y="-25">Operate</name>
			<label kind="invariant" x="119" y="-42">t &lt;= ts</label>
		</location>
		<location id="id493" x="-85" y="-17">
			<name x="-95" y="-51">Offset</name>
			<label kind="invariant" x="-153" y="8">t &lt;= OFFSET</label>
		</location>
		<location id="id494" x="-238" y="-17">
			<name x="-263" y="-51">Start</name>
			<label kind="invariant" x="-280" y="8">gtime &lt;= sn*IAT</label>
		</location>
		<init ref="id494"/>
		<transition>
			<source ref="id492"/>
			<target ref="id492"/>
			<label kind="guard" x="119" y="34">t &gt;= ts</label>
			<label kind="assignment" x="102" y="-93">blockRoutine(), t = 0</label>
			<nail x="102" y="-76"/>
			<nail x="196" y="-76"/>
			<nail x="196" y="51"/>
			<nail x="102" y="51"/>
		</transition>
		<transition>
			<source ref="id493"/>
			<target ref="id492"/>
			<label kind="guard" x="-42" y="-51">t &gt;= OFFSET</label>
			<label kind="assignment" x="-17" y="-8">blockRoutine(),
t = 0</label>
		</transition>
		<transition>
			<source ref="id494"/>
			<target ref="id493"/>
			<label kind="guard" x="-221" y="-51">gtime &gt;= sn*IAT</label>
			<label kind="assignment" x="-195" y="-17">initialize()</label>
		</transition>
	</template>
	<system>
// Place template instantiations here.

// List one or more processes to be composed into a system.
driver_accelerate_12_instance=driver_accelerate_12();
pedal_map_13_instance = pedal_map_13(); 
to_int_14_instance = to_int_14(); 
half_16_instance = half_16(); 
negative_17_instance = negative_17(); 
rr_18_instance = rr_18(); 
add_19_instance = add_19(); 
sample_time_over_mass_20_instance = sample_time_over_mass_20(); 
sum_21_instance = sum_21(); 
unit_delay_22_instance = unit_delay_22(); 
saturation_23_instance = saturation_23(); 
w_radps_24_instance = w_radps_24(); 
saturation_25_instance = saturation_25(); 
whlradius_26_instance = whlradius_26(); 
v_wr_27_instance = v_wr_27(); 
times100_28_instance = times100_28(); 
abs_29_instance = abs_29(); 
max_v_wr_30_instance = max_v_wr_30(); 
binary_search_ratio_32_instance = binary_search_ratio_32(); 
divide_33_instance = divide_33(); 
switch_35_instance = switch_35(); 
switch1_36_instance = switch1_36(); 
friction_force_n_37_instance = friction_force_n_37(); 
sign_38_instance = sign_38(); 
product_39_instance = product_39(); 
radius_40_instance = radius_40(); 
subtract_41_instance = subtract_41(); 
ts_over_inertia_43_instance = ts_over_inertia_43(); 
sum_44_instance = sum_44(); 
w__rpm__45_instance = w__rpm__45(); 
negative3_46_instance = negative3_46(); 
fl_47_instance = fl_47(); 
w_radps_48_instance = w_radps_48(); 
saturation_49_instance = saturation_49(); 
whlradius_50_instance = whlradius_50(); 
v_wr_51_instance = v_wr_51(); 
times100_52_instance = times100_52(); 
abs_53_instance = abs_53(); 
max_v_wr_54_instance = max_v_wr_54(); 
binary_search_ratio_56_instance = binary_search_ratio_56(); 
divide_57_instance = divide_57(); 
switch_59_instance = switch_59(); 
switch1_60_instance = switch1_60(); 
friction_force_n_61_instance = friction_force_n_61(); 
sign_62_instance = sign_62(); 
product_63_instance = product_63(); 
radius_64_instance = radius_64(); 
subtract_65_instance = subtract_65(); 
ts_over_inertia_67_instance = ts_over_inertia_67(); 
sum_68_instance = sum_68(); 
w__rpm__69_instance = w__rpm__69(); 
negative2_70_instance = negative2_70(); 
fr_71_instance = fr_71(); 
w_radps_72_instance = w_radps_72(); 
saturation_73_instance = saturation_73(); 
whlradius_74_instance = whlradius_74(); 
v_wr_75_instance = v_wr_75(); 
times100_76_instance = times100_76(); 
abs_77_instance = abs_77(); 
max_v_wr_78_instance = max_v_wr_78(); 
binary_search_ratio_80_instance = binary_search_ratio_80(); 
divide_81_instance = divide_81(); 
switch_83_instance = switch_83(); 
switch1_84_instance = switch1_84(); 
friction_force_n_85_instance = friction_force_n_85(); 
sign_86_instance = sign_86(); 
product_87_instance = product_87(); 
radius_88_instance = radius_88(); 
subtract_89_instance = subtract_89(); 
ts_over_inertia_91_instance = ts_over_inertia_91(); 
sum_92_instance = sum_92(); 
w__rpm__93_instance = w__rpm__93(); 
negative1_94_instance = negative1_94(); 
rl_95_instance = rl_95(); 
w_radps_96_instance = w_radps_96(); 
saturation_97_instance = saturation_97(); 
whlradius_98_instance = whlradius_98(); 
v_wr_99_instance = v_wr_99(); 
times100_100_instance = times100_100(); 
abs_101_instance = abs_101(); 
max_v_wr_102_instance = max_v_wr_102(); 
binary_search_ratio_104_instance = binary_search_ratio_104(); 
divide_105_instance = divide_105(); 
switch_107_instance = switch_107(); 
switch1_108_instance = switch1_108(); 
friction_force_n_109_instance = friction_force_n_109(); 
sign_110_instance = sign_110(); 
product_111_instance = product_111(); 
radius_112_instance = radius_112(); 
subtract_113_instance = subtract_113(); 
ts_over_inertia_115_instance = ts_over_inertia_115(); 
sum_116_instance = sum_116(); 
w__rpm__117_instance = w__rpm__117(); 
v__km_h__118_instance = v__km_h__118(); 
to_int_119_instance = to_int_119();  
whespd__m_s__122_instance = whespd__m_s__122(); 
v__m_s__123_instance = v__m_s__123(); 
subtract_124_instance = subtract_124(); 
positive_125_instance = positive_125(); 
times_10_126_instance = times_10_126(); 
slip_abs_on_times_10_127_instance = slip_abs_on_times_10_127(); 
relational_operator_128_instance = relational_operator_128(); 
lockdetect_131_instance = lockdetect_131(); 
threshold_10km_h_132_instance = threshold_10km_h_132(); 
to_int_135_instance = to_int_135(); 
whespd__m_s__138_instance = whespd__m_s__138(); 
v__m_s__139_instance = v__m_s__139(); 
subtract_140_instance = subtract_140(); 
positive_141_instance = positive_141(); 
times_10_142_instance = times_10_142(); 
slip_abs_on_times_10_143_instance = slip_abs_on_times_10_143(); 
relational_operator_144_instance = relational_operator_144(); 
lockdetect_147_instance = lockdetect_147(); 
threshold_10km_h_148_instance = threshold_10km_h_148(); 
to_int1_151_instance = to_int1_151(); 
driver_brake_160_instance=driver_brake_160();
pedal_map_161_instance = pedal_map_161(); 
round_to_int_163_instance = round_to_int_163();  
gain1_165_instance = gain1_165(); 
to_int_167_instance = to_int_167(); 
whespd__m_s__170_instance = whespd__m_s__170(); 
v__m_s__171_instance = v__m_s__171(); 
subtract_172_instance = subtract_172(); 
positive_173_instance = positive_173(); 
times_10_174_instance = times_10_174(); 
slip_abs_on_times_10_175_instance = slip_abs_on_times_10_175(); 
relational_operator_176_instance = relational_operator_176(); 
lockdetect_179_instance = lockdetect_179(); 
threshold_10km_h_180_instance = threshold_10km_h_180(); 
whespd__m_s__184_instance = whespd__m_s__184(); 
v__m_s__185_instance = v__m_s__185(); 
subtract_186_instance = subtract_186(); 
positive_187_instance = positive_187(); 
times_10_188_instance = times_10_188(); 
slip_abs_on_times_10_189_instance = slip_abs_on_times_10_189(); 
relational_operator_190_instance = relational_operator_190(); 
lockdetect_193_instance = lockdetect_193(); 
threshold_10km_h_194_instance = threshold_10km_h_194(); 
distribution_199_instance = distribution_199();  
add_201_instance = add_201(); 
average_rpm_202_instance = average_rpm_202(); 
w__grad_s__203_instance = w__grad_s__203(); 
v__km_h__204_instance = v__km_h__204();
	
system
driver_accelerate_12_instance,
pedal_map_13_instance,
to_int_14_instance,
half_16_instance,
negative_17_instance,
rr_18_instance,
add_19_instance,
sample_time_over_mass_20_instance,
sum_21_instance,
unit_delay_22_instance,
saturation_23_instance,
w_radps_24_instance,
saturation_25_instance,
v_wr_27_instance,
times100_28_instance,
abs_29_instance,
max_v_wr_30_instance,
binary_search_ratio_32_instance,
divide_33_instance,
switch_35_instance,
switch1_36_instance,
friction_force_n_37_instance,
sign_38_instance,
product_39_instance,
radius_40_instance,
subtract_41_instance,
ts_over_inertia_43_instance,
sum_44_instance,
w__rpm__45_instance,
negative3_46_instance,
fl_47_instance,
w_radps_48_instance,
saturation_49_instance,
whlradius_50_instance,
v_wr_51_instance,
times100_52_instance,
abs_53_instance,
max_v_wr_54_instance,
binary_search_ratio_56_instance,
divide_57_instance,
switch_59_instance,
switch1_60_instance,
friction_force_n_61_instance,
sign_62_instance,
product_63_instance,
radius_64_instance,
subtract_65_instance,
ts_over_inertia_67_instance,
sum_68_instance,
w__rpm__69_instance,
negative2_70_instance,
fr_71_instance,
w_radps_72_instance,
saturation_73_instance,
whlradius_74_instance,
v_wr_75_instance,
times100_76_instance,
abs_77_instance,
max_v_wr_78_instance,
binary_search_ratio_80_instance,
divide_81_instance,
switch_83_instance,
switch1_84_instance,
friction_force_n_85_instance,
sign_86_instance, 
product_87_instance, 
radius_88_instance,
subtract_89_instance,
ts_over_inertia_91_instance,
sum_92_instance, 
w__rpm__93_instance,
negative1_94_instance,
rl_95_instance,
w_radps_96_instance,
saturation_97_instance,
whlradius_98_instance,
v_wr_99_instance, 
times100_100_instance, 
abs_101_instance,
max_v_wr_102_instance,
binary_search_ratio_104_instance, 
divide_105_instance,
switch_107_instance,
switch1_108_instance,
friction_force_n_109_instance,
sign_110_instance,
product_111_instance,
radius_112_instance,
subtract_113_instance,
ts_over_inertia_115_instance,
sum_116_instance,
w__rpm__117_instance,
v__km_h__118_instance,
to_int_119_instance,
whespd__m_s__122_instance,
v__m_s__123_instance, 
subtract_124_instance, 
positive_125_instance, 
times_10_126_instance,
slip_abs_on_times_10_127_instance,
relational_operator_128_instance,
lockdetect_131_instance,
threshold_10km_h_132_instance,
to_int_135_instance,
whespd__m_s__138_instance,
v__m_s__139_instance,
subtract_140_instance,
positive_141_instance,
times_10_142_instance,
slip_abs_on_times_10_143_instance,
relational_operator_144_instance,
lockdetect_147_instance,
threshold_10km_h_148_instance,
to_int1_151_instance,
driver_brake_160_instance,
pedal_map_161_instance,
round_to_int_163_instance, 
gain1_165_instance,
to_int_167_instance,
whespd__m_s__170_instance,
v__m_s__171_instance,
subtract_172_instance,
positive_173_instance,
times_10_174_instance,
slip_abs_on_times_10_175_instance,
relational_operator_176_instance,
lockdetect_179_instance,
threshold_10km_h_180_instance,
whespd__m_s__184_instance,
v__m_s__185_instance,
subtract_186_instance,
positive_187_instance,
times_10_188_instance,
slip_abs_on_times_10_189_instance,
relational_operator_190_instance,
lockdetect_193_instance,
threshold_10km_h_194_instance,
distribution_199_instance,
add_201_instance,
average_rpm_202_instance,
w__grad_s__203_instance, 
v__km_h__204_instance,
Monitor;

	</system>
	<queries>
		<query>
			<formula>Pr[&lt;= 50](&lt;&gt;Monitor.End and ((VehicleSpeed&gt;10 &amp;&amp; SlipRate&gt;0) imply ABSBrakeTorque==0))
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
